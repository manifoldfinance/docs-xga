{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"eXtensible Gas Auction (XGA)","text":"<p>Multi-unit auctions, unlike their single-unit counterparts, present complex allocation mechanisms. TheXGA platform implements several innovative strategies:</p> <ol> <li>An enhanced uniform price auction,</li> <li>A Bifurcated Block Structure (splitting the block into halves),</li> <li>Elastic Supply Scheduling,</li> <li>Contract based bidding.</li> <li>Backwards compatible with MEV-Boost</li> <li>Exclusive Relay endpoint for Validator usage</li> </ol>"},{"location":"#block-structure","title":"Block Structure","text":"<p>We divide a block in two parts: \u237a-blockspace and \u03b2-blockspace</p> <p><code>\u237a-blockspace</code> is a very time sensitive kind of priority transactions. These transactions often come in last second.</p> <p><code>\u03b2-blockspace</code> however can be considered non-priority sensitive, meaning it is not very time sensitive, hence can be priced differently.</p>"},{"location":"#-blockspace","title":"\u237a-blockspace","text":"<ul> <li><code>\u237a-blockspace</code> - represents the top part of the blockspace. Economically,     this is where competitive searchers want to place their transactions (e.g.     for arbitrages etc.).<sup>1</sup></li> </ul>"},{"location":"#-blockspace_1","title":"\u03b2-blockspace","text":"<ul> <li><code>\u03b2-blockspace</code> - represents the rest of the blockspace. Economically, this     is where low-priority transactions - direct transfers, low volume swaps,     some kind of intents, etc. - would go. The rationale for this is simple:     <code>above</code> and below represent two very different markets: The first serves     strategic actors, whereas the second serves 'everyone else' - people not     interested in speculation that just want to transact, e.g., to pay for     stuff.<sup>2</sup></li> </ul> <pre><code>gantt\n    title Future auction for `below`\n    dateFormat YY-MM\n    axisFormat %m\n    tickInterval 1month\n    section Epoch i\n        We know slots for Epoch i+2 are 03,08 and 11 : crit, done, milestone, 00-01, 1m\n        Auction for `below`, slots 03,08,11 : 00-01, 6M\n        Futures awarded : milestone, 00-07, 1m\n        Users can transact: active, 00-07, 6M\n    section Epoch i+1\n        Users can transact: active, 01-01, 12M\n    section Epoch i+2\n        Slot 03, future can be used : crit, active, milestone, 02-03, 1\n        Slot 08, future can be used : crit, active, milestone, 02-08, 1\n        Slot 11, future can be used : crit, active, milestone, 02-11, 1</code></pre> <p>The Auction platform uses the SecureRPC.com relay, in which permissioned validator sets use exclusively<sup>3</sup>. As such, we will know 2 epochs in advance in which slots we will mint a block. Therefore, we can sell a proportion of blockspace 2 epochs in advance, enabling a forward call market for \u03b2-blockspace.</p>"},{"location":"#elastic-supply-schedule","title":"Elastic Supply Schedule","text":"<p>Elastic Supply Schedule: Breaking away from the rigidness of a fixed supply, we're introducing elasticity. When prices dip low, we'll strategically limit the availability of options. This dynamic approach ensures a balance between supply and demand, maintaining value and interest.</p> <p>Revamped Tie-Breaking Rule: In the world of auctions, ties are inevitable. Our approach is different. We're moving away from the conventional method that prioritizes higher marginal bids. Instead, we're implementing a novel rule that intensifies competition, particularly for those crucial marginal quantities.</p>"},{"location":"#why-these-changes-matter","title":"Why These Changes Matter","text":""},{"location":"#shortcomings-of-the-standard-uniform-price-auction","title":"Shortcomings of the standard uniform price auction","text":"<p>Traditionally, with a fixed supply, there's a looming risk of plummeting prices. This phenomenon, identified by Wilson<sup>4</sup>, highlights a bidder's tendency to underbid. In multi-unit auctions, this is a critical challenge. In a uniform price auction, underbidding on the marginal unit doesn't just lower the price for that unit; it slashes the overall price you pay.</p> <p>The real danger of severe under-pricing hinges on demand factors, which are often unpredictable and not easily deduced from existing data. The debate over whether discriminatory or uniform price auctions yield higher revenue remains unresolved, both theoretically (as discussed by Ausubel et al. 2011) and empirically.</p>"},{"location":"#tie-breaking-rule","title":"Tie Breaking Rule","text":"<p>The traditional tie-breaking rule, which prioritizes higher marginal bids, is inherently flawed. It doesn't account for the strategic value of the marginal unit. This is particularly problematic in multi-unit auctions, where the marginal unit is often the most valuable. The current rule fails to capture the true value of the marginal unit, leading to suboptimal outcomes. This is due to the discrete nature of bids, it can happen that there is market-clearing price (where demand=supply). The typical rule applied in many auctions favors high marginal bids first. We will consider an alternative that introduces more pressure at the quantity at the margin.</p>"},{"location":"#elastic-supply-curve-detail","title":"Elastic Supply Curve Detail","text":"<p>Maximum capacity is fixed, but the supply curve varies with price,</p> <p>\\(S:P\u2192Q\\)</p> <p>Thus we have different offering quantities of options.</p> <p>The supply function is designed to be initially concave, then constant at maximum capacity. This approach, theoretically supported by Licalzi (2005)<sup>5</sup>, aims to mitigate dramatic underpricing.</p>"},{"location":"#footnotes","title":"Footnotes","text":"<ol> <li> <p>Previously this was called 'above'\u00a0\u21a9</p> </li> <li> <p>Previously this was called 'below'\u00a0\u21a9</p> </li> <li> <p>Exclusivity is only needed in v1, v2 eliminates this requirement.\u00a0\u21a9</p> </li> <li> <p>Robert Wilson, 1979. \"Auctions of Shares,\" The Quarterly Journal of Economics, President and Fellows of Harvard College, vol. 93(4), pages 675-689.\u00a0\u21a9</p> </li> <li> <p>Marco LiCalzi, 2005. \"Tilting the supply schedule to enhance competition in uniform-price auctions\" European Economic Review, Volume 49, Issue 1, 2005, Pages 227-250\u00a0\u21a9</p> </li> </ol>"},{"location":"Clients/","title":"Validators","text":""},{"location":"Clients/#requirements","title":"Requirements","text":"<ul> <li>Operate as a self-reporting node operator</li> <li>Operating using MEV-Boost</li> </ul>"},{"location":"Clients/#protections","title":"Protections","text":"<p>Node Operators are being provided with a tailored risk management solution that addresses the unique challenges and risks of participating through the relay.</p> <p>Read more at Relay: Captive Insurance</p> <p>This is a block diagram of all the parts of the system and will be updated as needed.</p> <pre><code>graph LR\nsubgraph \"Consensus Node\"\n  engine[Engine API Client]\n  BAPI[Beacon API]\n  TICK[Slot processor]\n  blk_db[Block DB]\n  BS_db[Beacon State DB]\n  brod[Broadway]\n  FCTree[Fork choice store - Genserver]\n  BAPI --&gt;|Beacon state queries| BS_db\n  brod --&gt;|Save blocks| blk_db\n  brod --&gt;|Blocks and attestations| FCTree\n  TICK --&gt;|New ticks| FCTree\n  BAPI --&gt; engine\n  BAPI --&gt; |head/slot requests| FCTree\n  brod --&gt; |Save new states|BS_db\nend\nGOS[Gossip Protocols]\nexec[Execution Client]\nVALIDATOR[Validator]\nengine &lt;--&gt; |payload validation, execution| exec\nGOS --&gt;|blocks, attestations| brod\nVALIDATOR --&gt; BAPI</code></pre>"},{"location":"Clients/#networking","title":"Networking","text":"<p>The main entry for new events is the gossip protocol, which is how consensus nodes communicates with other consensus nodes.</p> <ol> <li> <p>Discovery: our node has a series of known <code>bootnodes</code> hardcoded. We request a    list of the nodes they know about and add them to our list. We save them    locally and now can use those too to request new nodes.</p> </li> <li> <p>Message propagation. When a proposer sends a new block, or validators attest    for a new block, they send those to other known nodes. Those, in turn,    propagate the messages sent to other nodes. This process is repeated until,    ideally, the whole network receives the messages.</p> </li> </ol>"},{"location":"Clients/#gossipsub","title":"Gossipsub","text":"<p>One of the main communication protocols is GossipSub. This allows us to tell peers which topics we're interested in and receive events for them. The main external events we react to are blocks and attestations.</p>"},{"location":"Clients/#receiving-an-attestation","title":"Receiving an attestation","text":"<pre><code>sequenceDiagram\n    participant prod as Topic Producer (GenStage)\n    participant proc as Topic Processor (Broadway)\n    participant FC as Fork-choice store\n\n    prod -&gt;&gt; proc: Produce demand\n    proc -&gt;&gt; proc: Decompress and deserialize message\n    proc -&gt;&gt;+ proc: on_attestation()\n    proc -&gt;&gt; FC: request latest message by the same validator\n    FC --&gt;&gt; proc: return\n    proc -&gt;&gt; proc: Validate attestation\n    proc -&gt;&gt;- FC: Update fork-choice store weights</code></pre> <p>When receiving an attestation, it's processed by the on_attestation callback. We just validate it and send it to the fork choice store to update its weights and target checkpoints. The attestation is only processed if this attestation is the latest message by that validator. If there's a newer one, it should be discarded.</p> <p>The most relevant piece of the spec here is the get_weight function, which is the core of the fork-choice algorithm. In the specs, this function is called on demand, when calling get_head, works with the store's values, and recalculates them each time.</p> <p>Important</p> <p>It is a requirement that the validator cache the weights and the head root each time it adds a block or attestation: so it won't need to do the same calculations again. Additionally, it should save the latest messages in persistent storage as well so that if the node crashes it can recover the tree weights.</p>"},{"location":"Clients/#receiving-a-block","title":"Receiving a block","text":"<pre><code>sequenceDiagram\n    participant prod as Topic Producer (GenStage)\n    participant proc as Topic Processor (Broadway)\n    participant block as Block DB\n    participant state as Beacon States DB\n    participant FC as Fork-choice store\n    participant exec as Execution Client\n\n    prod -&gt;&gt; proc: Produce demand\n    proc -&gt;&gt; proc: Decompress and deserialize message\n    proc -&gt;&gt;+ proc: on_block(block)\n    proc -&gt;&gt; exec: Validate execution payload\n    exec --&gt;&gt; proc: ok\n    proc -&gt;&gt; FC: request validation metadata\n    FC --&gt;&gt; proc: return\n    proc -&gt;&gt; proc: Validate block\n    proc -&gt;&gt; block: Save new block\n    proc -&gt;&gt; proc: Calculate state transition\n    proc -&gt;&gt; state: Save new beacon state metadata\n    proc -&gt;&gt; FC: Add a new block to the tree and update weights\n    loop\n        proc -&gt;&gt;- proc: process_operations\n    end\n    loop\n        proc -&gt;&gt; proc: on_attestation\n    end</code></pre> <p>Receiving a block is more complex:</p> <ul> <li>The block itself needs to be stored.</li> <li>The state transition needs to be applied, a new beacon state calculated, and     stored separately.</li> <li>A new node needs to be added to the block tree aside from updating weights.</li> <li>on_attestation needs to be called for each attestation.</li> </ul> <p>Also, there's a more complex case: we can only include a block in the fork tree if we know of its parents and their connection with our current finalized checkpoint. If we receive a disconnected node, we'll need to use Request-Response to ask peers for the missing blocks.</p>"},{"location":"Clients/accounting/","title":"Accounting and Rewards","text":""},{"location":"Clients/accounting/#payment-processing-and-finalization","title":"Payment processing and finalization","text":"<p>Builder payments are processed during the epoch finalization process (a two-epoch lag).</p> <ul> <li> <p>The builder <code>ExecutionPayloadHeader</code> is part of the canonical chain (i.e.,     the CL block for that slot is not missing). This includes two cases: The     corresponding <code>ExecutionPayload</code> MUST also part of the canonical chain.</p> </li> <li> <p>The builder <code>ExecutionPayloadHeader</code> is part of the canonical chain even if     the corresponding <code>ExecutionPayload</code> is not.</p> </li> </ul> <p>This means that there is consensus that the builder was not on time by virtue of having an empty block. However, this may be intentional in the mutli-block auction scenario so is subject to change</p>"},{"location":"Clients/accounting/#proposer-equivocation","title":"Proposer equivocation","text":"<p>There is no evidence of proposer equivocation.</p> <ul> <li>A builder who sees an equivocation can get the validator slashed. Any     slashed validator will not receive the unconditional builder payment.</li> </ul>"},{"location":"Clients/accounting/#builder-payment-methods","title":"Builder Payment Methods","text":"<p>Builder payment patterns in the context of MEV payments to the validators</p> <p>Read more at Learning: Payment Methods</p>"},{"location":"Clients/accounting/#indirect-address-payment-iap-method","title":"Indirect Address Payment (IAP) Method","text":"<p>This method involves the builder using a different address to pay the proposer through an end-of-block transaction. In this pattern, the builder first sets its own address to receive the block\u2019s transaction fees and then employs a different address to remunerate the proposer in the end-of-block transaction.</p>"},{"location":"Clients/accounting/#intermediate-transfer-payment-itp-method","title":"Intermediate Transfer Payment (ITP) Method","text":"<p>In this method, the builder pays the proposer through an end-of-block transaction, initially transferring the amount to an alternate address, which then initiates an internal transaction to send the funds to the proposer. This involves a two-step process where the payment is first sent to an intermediary address (like a smart contract) before reaching the proposer.</p>"},{"location":"Clients/accounting/#proposer-payments-value-ppv","title":"Proposer Payments Value (PPV)","text":"<p>The <code>feeReceipent</code> address is configured in the consensus layer client and is provided by the NO at the time of the block proposal. Because the eth1 address that is provided for the feeReceipent is under the complete control of the NO, there is an opportunity for a NO to steal all the PPV for themselves.</p>"},{"location":"Clients/clients/","title":"Clients","text":""},{"location":"Clients/clients/#ethereum-network","title":"Ethereum Network","text":"<p>What is the Etheruem network?<sup>1</sup></p> <ul> <li>A user of the network sends a transaction (e.g. an ETH transfer) to the     network.</li> <li>The network validates the transaction.</li> <li>The network includes the transaction in a block.</li> <li>The network includes the block in the chain, so the new state includes the     transaction sent by the user. Any user can request this information and the     change will be reflected.</li> </ul> <p>The problem here is: what does sending something to the network mean?</p>"},{"location":"Clients/clients/#execution-and-consensus-clients","title":"Execution and Consensus clients","text":"<p>A full node is split into two clients:</p> <ul> <li>The execution client knows how to represent the EVM state and apply     state changes (transactions) to generate new states. It represents the state     machine.</li> <li>The consensus client knows very little about the state machine, but     knows how to choose between different worldviews and agree with other nodes.     It enables the execution client to apply the correct state transitions.</li> </ul> <pre><code>graph BT\nsubgraph consensus[Consensus Client]\n    bstate[Beacon State]\n    Validator\nend\n\nsubgraph \"Execution Client\"\n    mempool\n    state\nend\n\n\nex_gossip[Execution Gossip Protocol]\ncon_gossip[Consensus Gossip Protocol]\nex_gossip&lt;--&gt;|Transactions|mempool\n\ncon_gossip --&gt;|Proposed blocks \\n attestations| bstate\nValidator --&gt;|Propose a block|con_gossip\nmempool--&gt;|Get a block to build a proposal|Validator\nbstate--&gt;|Apply a block|state\nuser --&gt;|Sends new transactions| mempool\nstate --&gt;|State queries| user\n\nlinkStyle 2 stroke:#ff0000,stroke-width:2px;\nlinkStyle 3 stroke:#ff0000,stroke-width:2px;</code></pre> <p>You might notice there's a section called \"validator\" in there, with red arrows. Your node is considered a validator if it has 32 ETH staked in the validator contract, which makes it capable of proposing new blocks and attesting to other proposals. That is: actively participating in the protocol and getting rewards for it.</p> <p>If you're not a validator you can still participate though! The block diagram is the same, without the red lines (and you won't receive rewards for it). You can still send transactions to your local node, propagate them to others, and receive updates.</p>"},{"location":"Clients/clients/#lifecycle-of-a-transaction","title":"Lifecycle of a transaction","text":"<p>Here's the full sequence from the perspective of a non-validator node:</p> <ol> <li> <p>A user builds, signs, and sends a transaction to their execution client's    JSON-RPC API. This is usually done with a wrapper library like <code>ethers</code>,    <code>hardhat</code>, or <code>foundry</code>.</p> </li> <li> <p>The execution client receives the transaction and:</p> <ol> <li> <p>Validates it (checks the user has enough ETH, the signature matches,    etc).</p> </li> <li> <p>Adds it to its local mempool. The mempool is a local pool of transactions    that are not yet executed.</p> </li> <li> <p>Broadcasts it through the execution gossip layer, to other execution    nodes. Other execution nodes include it in their mempools.</p> </li> </ol> </li> <li> <p>A validator node is selected as a block proposer. As a proposer:</p> <ol> <li> <p>Their execution client bundles many transactions from its mempool into a    block.</p> </li> <li> <p>All transactions in the bundle are executed locally and state change is    calculated.</p> </li> <li> <p>Their consensus client gets this block (or as consensus calls it,    \"execution payload\") and adds consensus layer information, like    attestations, slashings, rewards, penalties, etc. The execution payload +    consensus metadata forms a \"beacon block\".</p> </li> <li>The beacon block is signed and sent over the consensus gossip layer to    other nodes.</li> </ol> </li> <li> <p>A committee of validators validates that block and sends signed attestations    for it over the consensus gossip protocol too.</p> </li> <li> <p>All nodes receive both the new proposed block and attestations. Then they:</p> <ol> <li>Include the new block in their local fork tree if it's valid.</li> <li>Save the attestations and update the weights of the blocks on the tree.</li> <li>Apply fork choice to recalculate, if necessary, what blocks are included    in the canonical chain.</li> <li>The changes + the new block are propagated to the execution node so    transactions are applied and the state is changed and up to date.</li> </ol> </li> </ol> <p>The Ethereum network is not a networked database: It's a series of tubes. And if you don't understand, those tubes can be filled and if they are filled, when you put your message in, it gets in line and it's going to be delayed by anyone that puts into that tube enormous amounts of material, enormous amounts of material. Ted Stevens (2024) Wikipedia. Available at: https://en.wikipedia.org/wiki/Ted_Stevens (Accessed: 03 April 2024).</p> <ol> <li></li> </ol>"},{"location":"Clients/configuration/","title":"Configuration","text":""},{"location":"Clients/configuration/#mandatory-values-for-validator-and-beacon-clients","title":"Mandatory Values for Validator and Beacon clients","text":"<p>LocalBlockValueBoost is the value boost for local block construction. This is used to prioritize local block construction over relay/builder block construction.</p> <pre><code>LocalBlockValueBoost = 0\n</code></pre> <p>The equation is as follows:</p>"},{"location":"Clients/configuration/#prysm1","title":"Prysm<sup>1</sup>","text":"\\[ builder_bid_value _ 100 &gt; local_block_value _ (local-block-value-boost + 100) \\]"},{"location":"Clients/configuration/#teku2","title":"Teku<sup>2</sup>","text":"\\[ exec_node_payload_value &gt;= builder_boost_factor \\* (builder_payload_value // 100) \\]"},{"location":"Clients/configuration/#example-prysm","title":"Example: Prysm","text":"<pre><code>EthBurnAddressHex                string           // EthBurnAddressHex is the constant eth address written in hex format to burn fees in that network. the default is 0x0\nDefaultBuilderGasLimit           uint64           // DefaultBuilderGasLimit is the default used to set the gaslimit for the Builder APIs, typically at around 30M wei.\n\n// Mev-boost circuit breaker\nMaxBuilderConsecutiveMissedSlots primitives.Slot // MaxBuilderConsecutiveMissedSlots defines the number of consecutive skip slot to fallback from using relay/builder to local execution engine for block construction.\nMaxBuilderEpochMissedSlots       primitives.Slot // MaxBuilderEpochMissedSlots is defines the number of total skip slot (per epoch rolling windows) to fallback from using relay/builder to local execution engine for block construction.\nLocalBlockValueBoost             uint64          // LocalBlockValueBoost is the value boost for local block construction. This is used to prioritize local block construction over relay/builder block construction.\n\n// Execution engine timeout value\n</code></pre>"},{"location":"Clients/configuration/#example-teku","title":"Example: Teku","text":"<pre><code>  private void logPayloadValueComparisonDetails(\n      final boolean localPayloadValueWon,\n      final UInt256 builderBidValue,\n      final UInt256 localPayloadValue,\n      final boolean isRequestedBuilderBoostFactor,\n      final UInt64 actualBuilderBoostFactor) {\n    final String actualComparisonFactorString;\n    final String comparisonFactorSource = isRequestedBuilderBoostFactor ? \"VC\" : \"BN\";\n\n    if (actualBuilderBoostFactor.equals(BUILDER_BOOST_FACTOR_MAX_PROFIT)) {\n      actualComparisonFactorString = \"MAX_PROFIT\";\n    } else if (actualBuilderBoostFactor.equals(BUILDER_BOOST_FACTOR_PREFER_EXECUTION)) {\n      actualComparisonFactorString = \"PREFER_EXECUTION\";\n    } else if (actualBuilderBoostFactor.equals(BUILDER_BOOST_FACTOR_PREFER_BUILDER)) {\n      actualComparisonFactorString = \"PREFER_BUILDER\";\n    } else {\n      actualComparisonFactorString = actualBuilderBoostFactor + \"%\";\n    }\n</code></pre>"},{"location":"Clients/configuration/#footnotes","title":"Footnotes","text":"<ol> <li> <p>Prysm\u00a0\u21a9</p> </li> <li> <p>Teku\u00a0\u21a9</p> </li> </ol>"},{"location":"Clients/relay/","title":"Relay","text":""},{"location":"Clients/relay/#relay","title":"Relay","text":"<p>proposer payout: empty block, 0; non empty block, non-negative value &lt; 0</p> <p>Once a proposer calls <code>submitBlindedBlock</code> to a relay (with a signed header), it depends on the relay to release the block to be able to propose anything (no fallback to a local block is possible at that point due to possible slashing).</p> <p>There's several relay error scenarios:</p> <ol> <li> <p>payload withholding (relay doesn't release the payload and the proposer     needs to forfeit the slot)</p> </li> <li> <p>incorrect payload     a. incorrect value (the final amount paid by the builder to the proposer was     different to the amount claimed in the <code>BuilderBid</code>)     b. invalid block (invalid data / fields)</p> </li> </ol>"},{"location":"Clients/requirements/","title":"Requirements","text":"","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Clients/requirements/#required-validator-endpoints","title":"Required Validator Endpoints","text":"<ul> <li>/eth/v1/validator/attestation_data</li> <li>/eth/v1/beacon/headers/{block_id}</li> <li>/eth/v1/beacon/states/{state_id}/finality_checkpoints</li> <li>/eth/v1/beacon/states/{state_id}/fork</li> <li>/eth/v1/beacon/headers</li> <li>/eth/v1/validator/liveness</li> <li>/eth/v1/node/syncing</li> <li>/eth/v1/config/deposit_contract</li> <li>/eth/v1/beacon/states/{state_id}/committees</li> <li>/eth/v1/validator/duties/attester/{epoch}</li> <li>/eth/v1/validator/duties/proposer/{epoch}</li> <li>/eth/v1/validator/duties/sync/{epoch}</li> <li>/eth/v1/beacon/genesis</li> <li>/eth/v1/validator/prepare_beacon_proposer</li> <li>/eth/v1/beacon/pool/attestations</li> <li>/eth/v1/beacon/blinded_blocks</li> <li>/eth/v1/beacon/blocks</li> <li>/eth/v1/beacon/pool/voluntary_exits</li> <li>/eth/v1/validator/register_validator</li> <li>/eth/v1/beacon/states/{state_id}/validators</li> <li>/eth/v1/validator/aggregate_attestation</li> <li>/eth/v1/validator/aggregate_and_proofs</li> <li>/eth/v1/validator/contribution_and_proofs</li> <li>/eth/v1/validator/beacon_committee_subscriptions</li> <li>/eth/v1/beacon/pool/sync_committees</li> <li>/eth/v1/beacon/blocks/{block_id}/root</li> <li>/eth/v1/validator/sync_committee_contribution</li> </ul>","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Clients/validators/","title":"Validators","text":"<p>This is a block diagram of all the parts of the system and will be updated as needed.</p> <pre><code>graph LR\nsubgraph \"Consensus Node\"\n  engine[Engine API Client]\n  BAPI[Beacon API]\n  TICK[Slot processor]\n  blk_db[Block DB]\n  BS_db[Beacon State DB]\n  brod[Broadway]\n  FCTree[Fork choice store - Genserver]\n  BAPI --&gt;|Beacon state queries| BS_db\n  brod --&gt;|Save blocks| blk_db\n  brod --&gt;|Blocks and attestations| FCTree\n  TICK --&gt;|New ticks| FCTree\n  BAPI --&gt; engine\n  BAPI --&gt; |head/slot requests| FCTree\n  brod --&gt; |Save new states|BS_db\nend\nGOS[Gossip Protocols]\nexec[Execution Client]\nVALIDATOR[Validator]\nengine &lt;--&gt; |payload validation, execution| exec\nGOS --&gt;|blocks, attestations| brod\nVALIDATOR --&gt; BAPI</code></pre>"},{"location":"Clients/validators/#networking","title":"Networking","text":"<p>The main entry for new events is the gossip protocol, which is how consensus nodes communicates with other consensus nodes.</p> <ol> <li> <p>Discovery: our node has a series of known <code>bootnodes</code> hardcoded. We request a    list of the nodes they know about and add them to our list. We save them    locally and now can use those too to request new nodes.</p> </li> <li> <p>Message propagation. When a proposer sends a new block, or validators attest    for a new block, they send those to other known nodes. Those, in turn,    propagate the messages sent to other nodes. This process is repeated until,    ideally, the whole network receives the messages.</p> </li> </ol>"},{"location":"Clients/validators/#gossipsub","title":"Gossipsub","text":"<p>One of the main communication protocols is GossipSub. This allows us to tell peers which topics we're interested in and receive events for them. The main external events we react to are blocks and attestations.</p>"},{"location":"Clients/validators/#receiving-an-attestation","title":"Receiving an attestation","text":"<pre><code>sequenceDiagram\n    participant prod as Topic Producer (GenStage)\n    participant proc as Topic Processor (Broadway)\n    participant FC as Fork-choice store\n\n    prod -&gt;&gt; proc: Produce demand\n    proc -&gt;&gt; proc: Decompress and deserialize message\n    proc -&gt;&gt;+ proc: on_attestation()\n    proc -&gt;&gt; FC: request latest message by the same validator\n    FC --&gt;&gt; proc: return\n    proc -&gt;&gt; proc: Validate attestation\n    proc -&gt;&gt;- FC: Update fork-choice store weights</code></pre> <p>When receiving an attestation, it's processed by the on_attestation callback. We just validate it and send it to the fork choice store to update its weights and target checkpoints. The attestation is only processed if this attestation is the latest message by that validator. If there's a newer one, it should be discarded.</p> <p>The most relevant piece of the spec here is the get_weight function, which is the core of the fork-choice algorithm. In the specs, this function is called on demand, when calling get_head, works with the store's values, and recalculates them each time.</p> <p>Important</p> <p>It is a requirement that the validator cache the weights and the head root each time it adds a block or attestation: so it won't need to do the same calculations again. Additionally, it should save the latest messages in persistent storage as well so that if the node crashes it can recover the tree weights.</p>"},{"location":"Clients/validators/#receiving-a-block","title":"Receiving a block","text":"<pre><code>sequenceDiagram\n    participant prod as Topic Producer (GenStage)\n    participant proc as Topic Processor (Broadway)\n    participant block as Block DB\n    participant state as Beacon States DB\n    participant FC as Fork-choice store\n    participant exec as Execution Client\n\n    prod -&gt;&gt; proc: Produce demand\n    proc -&gt;&gt; proc: Decompress and deserialize message\n    proc -&gt;&gt;+ proc: on_block(block)\n    proc -&gt;&gt; exec: Validate execution payload\n    exec --&gt;&gt; proc: ok\n    proc -&gt;&gt; FC: request validation metadata\n    FC --&gt;&gt; proc: return\n    proc -&gt;&gt; proc: Validate block\n    proc -&gt;&gt; block: Save new block\n    proc -&gt;&gt; proc: Calculate state transition\n    proc -&gt;&gt; state: Save new beacon state metadata\n    proc -&gt;&gt; FC: Add a new block to the tree and update weights\n    loop\n        proc -&gt;&gt;- proc: process_operations\n    end\n    loop\n        proc -&gt;&gt; proc: on_attestation\n    end</code></pre> <p>Receiving a block is more complex:</p> <ul> <li>The block itself needs to be stored.</li> <li>The state transition needs to be applied, a new beacon state calculated, and     stored separately.</li> <li>A new node needs to be added to the block tree aside from updating weights.</li> <li>on_attestation needs to be called for each attestation.</li> </ul> <p>Also, there's a more complex case: we can only include a block in the fork tree if we know of its parents and their connection with our current finalized checkpoint. If we receive a disconnected node, we'll need to use Request-Response to ask peers for the missing blocks.</p>"},{"location":"Developers/","title":"Developer overview","text":""},{"location":"Developers/#general","title":"General","text":"<ul> <li> <p>SDK</p> </li> <li> <p>Mainnet</p> </li> <li> <p>Holesky Testnet</p> </li> </ul>"},{"location":"Developers/#auction-contracts-v10","title":"Auction Contracts v1.0","text":"<ul> <li>Interface</li> </ul>"},{"location":"Developers/#builder-and-searcher-specific","title":"Builder and Searcher specific","text":"<p>Requirements</p> <p>Payment Methods</p>"},{"location":"Developers/builders/","title":"Builder overview","text":""},{"location":"Developers/builders/#block-properties","title":"Block Properties","text":"<p>Builders need the following data:</p> Field Where it comes from Notes <code>feeRecipient</code> validator (<code>builder_registerValidator</code>) Address to receive fees from the block. <code>gasLimit</code> validator (<code>builder_registerValidator</code>) preferred gas limit of validator <code>timestamp</code> relay (BN) value for the timestamp field of the new payload <code>prevRandao</code> relay (BN) from previous slot <code>extraData</code> builder graffiti from builder, not proposer"},{"location":"Developers/builders/#builder-api","title":"Builder Api","text":"<p>All URIs are relative to http://localhost:18550</p> Method HTTP request Description getValidators GET <code>/relay/v1/builder/validators</code> Get a list of validator registrations for validators scheduled to propose in the current and next epoch. submitBlock POST <code>/relay/v1/builder/blocks</code> Submit a new block to the relay. <p></p>"},{"location":"Developers/builders/#getvalidators","title":"getValidators","text":"<p>List <code>getValidators()</code></p> <p>Get a list of validator registrations for validators scheduled to propose in the current and next epoch.</p> <ul> <li>Used by builders to know when to submit bids for an upcoming proposal.</li> <li>Returns an array of validator registrations for the current and next epoch.</li> <li>Each entry includes a slot and the validator with assigned duty.</li> <li>Slots without a registered validator are omitted.</li> </ul>"},{"location":"Developers/builders/#parameters","title":"Parameters","text":"<p>This endpoint does not need any parameter.</p>"},{"location":"Developers/builders/#return-type","title":"Return type","text":"<p>List</p> Name Type Description Notes fee_recipient String Address to receive fees from the block. [default to null] gas_limit String Preferred gas limit of validator. [default to null] timestamp String Unix timestamp of registration. [default to null] pubkey String BLS public key of validator. [default to null]"},{"location":"Developers/builders/#authorization","title":"Authorization","text":"<p>No authorization required</p>"},{"location":"Developers/builders/#http-request-headers","title":"HTTP request headers","text":"<ul> <li>Content-Type: Not defined</li> <li>Accept: application/json</li> </ul>"},{"location":"Developers/builders/#submitblock","title":"submitBlock","text":"<p>submitBlock(submitBlock_request, cancellations)</p> <p>Submit a new block to the relay.</p> <ul> <li>Blocks can be submitted as JSON or SSZ, and optionally GZIP encoded. To be     clear, there are four options: JSON, JSON+GZIP, SSZ, SSZ+GZIP. If JSON, the     content type should be `application/json`. If SSZ, the content     type should be `application/octet-stream`.</li> <li>To enable GZIP compression for the request body, the HTTP content encoding     should be `gzip`. Compression is optional.</li> <li>The relay will simulate the block to verify properties and proposer payment     in the payment transaction from builder to proposer     `fee_recipient` at the end of block.</li> <li>For accountability, builder signature is over the SSZ encoded     `message`.</li> <li>The `message`, which does not include the transactions, will be     made public via the data API, allowing anyone to verify the builder     signature.</li> <li>Any new submission by a builder will overwrite a previous one by the same     `builder_pubkey`, even if it is less profitable.</li> </ul>"},{"location":"Developers/builders/#parameters_1","title":"Parameters","text":"Name Type Description Notes submitBlock_request submitBlock_request A signed bid with an execution payload. cancellations String If set to 1, opt into bid cancellations. [optional] [default to null]"},{"location":"Developers/builders/#return-type_1","title":"Return type","text":"<p>null (empty response body)</p>"},{"location":"Developers/builders/#authorization_1","title":"Authorization","text":"<p>No authorization required</p>"},{"location":"Developers/builders/#http-request-headers_1","title":"HTTP request headers","text":"<ul> <li>Content-Type: application/json, application/octet-stream</li> <li>Accept: application/json</li> </ul>"},{"location":"Developers/builders/#submitblock_request","title":"submitBlock_request","text":""},{"location":"Developers/builders/#properties","title":"Properties","text":"Name Type Description Notes slot String [optional] [default to null] parent_hash String [optional] [default to null] block_hash String [optional] [default to null] builder_pubkey String The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive. [optional] [default to null] proposer_pubkey String The validator's BLS public key, uniquely identifying them. 48-bytes, hex encoded with 0x prefix, case insensitive. [optional] [default to null] proposer_fee_recipient String An address on the execution (Ethereum 1) network. [optional] [default to null] gas_limit String [optional] [default to null] gas_used String [optional] [default to null] value String [optional] [default to null]"},{"location":"Developers/interface/","title":"Summary Interfaces","text":"<ul> <li>Auctioneer</li> <li>Settlement</li> <li>Bidder</li> </ul>"},{"location":"Developers/interface/#auctioneer-interface","title":"Auctioneer Interface","text":"<p>Git Source</p> <p>Inherits: ERC6909, Ownable2Step</p> <p>Implements an auction mechanism for selling block space.</p>"},{"location":"Developers/interface/#structs","title":"Structs","text":""},{"location":"Developers/interface/#auction","title":"Auction","text":"<pre><code>struct Auction {\n    uint120 itemsForSale;\n    bool isOpen;\n    bool isSettled;\n    bool isPaidOut;\n    bool isRefunded;\n    mapping(address =&gt; BidderInfo) biddersInfo;\n}\n</code></pre>"},{"location":"Developers/interface/#bidderinfo","title":"BidderInfo","text":"<pre><code>struct BidderInfo {\n    uint120 itemsBought;\n    uint128 amountOwed;\n}\n</code></pre>"},{"location":"Developers/interface/#state-variables","title":"State Variables","text":""},{"location":"Developers/interface/#maxbidder","title":"maxBidder","text":"<pre><code>uint8 public maxBidder;\n</code></pre>"},{"location":"Developers/interface/#weth9","title":"WETH9","text":"<pre><code>WETH public immutable WETH9;\n</code></pre>"},{"location":"Developers/interface/#accountant","title":"accountant","text":"<pre><code>address public accountant;\n</code></pre>"},{"location":"Developers/interface/#maxbids","title":"maxBids","text":"<pre><code>uint256 public maxBids = 50;\n</code></pre>"},{"location":"Developers/interface/#mingasamount","title":"minGasAmount","text":"<pre><code>uint120 public minGasAmount = 20000;\n</code></pre>"},{"location":"Developers/interface/#operator","title":"operator","text":"<pre><code>address public operator;\n</code></pre>"},{"location":"Developers/interface/#idmap","title":"IdMap","text":"<pre><code>mapping(address bidder =&gt; uint8 id) public IdMap;\n</code></pre>"},{"location":"Developers/interface/#biddermap","title":"bidderMap","text":"<pre><code>mapping(uint8 id =&gt; address bidder) public bidderMap;\n</code></pre>"},{"location":"Developers/interface/#auctions","title":"auctions","text":"<pre><code>mapping(uint256 slot =&gt; Auction) public auctions;\n</code></pre>"},{"location":"Developers/interface/#slotscount","title":"slotsCount","text":"<pre><code>uint256 public slotsCount;\n</code></pre>"},{"location":"Developers/interface/#slotsauctioned","title":"slotsAuctioned","text":"<pre><code>mapping(uint256 index =&gt; uint256 slot) public slotsAuctioned;\n</code></pre>"},{"location":"Developers/interface/#bidcount","title":"bidCount","text":"<pre><code>mapping(uint256 slot =&gt; uint256 count) public bidCount;\n</code></pre>"},{"location":"Developers/interface/#functions","title":"Functions","text":""},{"location":"Developers/interface/#bid","title":"bid","text":"<p>Bid function for bidders to submit manual bids.</p> <pre><code>function bid(uint256 slot, uint256[] memory packedBids) external;\n</code></pre> <p>Parameters</p> Name Type Description <code>slot</code> <code>uint256</code> The auction slot. <code>packedBids</code> <code>uint256[]</code> Array of packed bids"},{"location":"Developers/interface/#getbidderinfo","title":"getBidderInfo","text":"<p>Retrieve information about a bidder after auction settlement.</p> <pre><code>function getBidderInfo(uint256 slot, address bidder) external view returns (uint120 itemsBought, uint128 amountOwed);\n</code></pre> <p>Parameters</p> Name Type Description <code>slot</code> <code>uint256</code> The slot identifier of the auction. <code>bidder</code> <code>address</code> The address of the bidder for whom information is requested. <p>Returns</p> Name Type Description <code>itemsBought</code> <code>uint120</code> The number of items bought by the bidder in the specified auction. <code>amountOwed</code> <code>uint128</code> The amount owed by the bidder for the items bought in the specified auction. Requirements: - The auction must have been settled. - The provided <code>bidder</code> address must be valid and have participated in the auction."},{"location":"Developers/interface/#packbid","title":"packBid","text":"<p>Packed Bid details into a uint256 for submission.</p> <pre><code>function packBid(uint128 bidPrice, uint120 itemsToBuy, uint8 bidderId) external pure returns (uint256 packedBid);\n</code></pre> <p>Parameters</p> Name Type Description <code>bidPrice</code> <code>uint128</code> Price per item. <code>itemsToBuy</code> <code>uint120</code> Items to buy in the auction. <code>bidderId</code> <code>uint8</code> Id for bidder <p>Returns</p> Name Type Description <code>packedBid</code> <code>uint256</code> for auction submission"},{"location":"Developers/interface/#calcaveragebid","title":"calcAverageBid","text":"<p>Calculate average bid price for the last n auctions</p> <pre><code>function calcAverageBid(uint256 numAuctions) external view returns (uint128 avBidPrice);\n</code></pre> <p>Parameters</p> Name Type Description <code>numAuctions</code> <code>uint256</code> Number of auctions to average for <p>Returns</p> Name Type Description <code>avBidPrice</code> <code>uint128</code> for last n auctions"},{"location":"Developers/interface/#events","title":"Events","text":""},{"location":"Developers/interface/#auctionsettled","title":"AuctionSettled","text":"<pre><code>event AuctionSettled(uint256 indexed slot);\n</code></pre>"},{"location":"Developers/interface/#bidderadded","title":"BidderAdded","text":"<pre><code>event BidderAdded(address indexed bidder, uint8 indexed bidderId);\n</code></pre>"},{"location":"Developers/interface/#bidderremoved","title":"BidderRemoved","text":"<pre><code>event BidderRemoved(address indexed bidder, uint8 indexed bidderId);\n</code></pre>"},{"location":"Developers/interface/#auctionopened","title":"AuctionOpened","text":"<pre><code>event AuctionOpened(uint256 indexed slot, uint120 itemsForSale);\n</code></pre>"},{"location":"Developers/interface/#auctionpaidout","title":"AuctionPaidOut","text":"<pre><code>event AuctionPaidOut(uint256 indexed slot);\n</code></pre>"},{"location":"Developers/interface/#auctionrefund","title":"AuctionRefund","text":"<pre><code>event AuctionRefund(uint256 indexed slot);\n</code></pre>"},{"location":"Developers/interface/#errors","title":"Errors","text":""},{"location":"Developers/interface/#invalidid","title":"InvalidId","text":"<pre><code>error InvalidId();\n</code></pre>"},{"location":"Developers/interface/#unauthorized","title":"Unauthorized","text":"<pre><code>error Unauthorized();\n</code></pre>"},{"location":"Developers/interface/#invalidbiditems","title":"InvalidBidItems","text":"<pre><code>error InvalidBidItems();\n</code></pre>"},{"location":"Developers/interface/#insufficientfunds","title":"InsufficientFunds","text":"<pre><code>error InsufficientFunds();\n</code></pre>"},{"location":"Developers/interface/#auctionnotopen","title":"AuctionNotOpen","text":"<pre><code>error AuctionNotOpen(uint256 slot);\n</code></pre>"},{"location":"Developers/interface/#auctionnotclosed","title":"AuctionNotClosed","text":"<pre><code>error AuctionNotClosed(uint256 slot);\n</code></pre>"},{"location":"Developers/interface/#auctionalreadyopen","title":"AuctionAlreadyOpen","text":"<pre><code>error AuctionAlreadyOpen(uint256 slot);\n</code></pre>"},{"location":"Developers/interface/#auctionalreadysettled","title":"AuctionAlreadySettled","text":"<pre><code>error AuctionAlreadySettled(uint256 slot);\n</code></pre>"},{"location":"Developers/interface/#biddernotregistered","title":"BidderNotRegistered","text":"<pre><code>error BidderNotRegistered(address bidder);\n</code></pre>"},{"location":"Developers/interface/#bidderalreadyexists","title":"BidderAlreadyExists","text":"<pre><code>error BidderAlreadyExists(address bidder);\n</code></pre>"},{"location":"Developers/interface/#settlementhouse-interface","title":"SettlementHouse Interface","text":"<p>Git Source</p> <p>A contract for managing bundles of transactions for a futures token.</p>"},{"location":"Developers/interface/#structs_1","title":"Structs","text":""},{"location":"Developers/interface/#bundle","title":"Bundle","text":"<pre><code>struct Bundle {\n    address submitter;\n    uint256 amountOfGas;\n    bytes32[] bundleHashes;\n}\n</code></pre>"},{"location":"Developers/interface/#state-variables_1","title":"State Variables","text":""},{"location":"Developers/interface/#futurestoken","title":"futuresToken","text":"<pre><code>IERC6909 public immutable futuresToken;\n</code></pre>"},{"location":"Developers/interface/#functions_1","title":"Functions","text":""},{"location":"Developers/interface/#submitbundle","title":"submitBundle","text":"<pre><code>function submitBundle(uint256 slot, uint256 amountOfGas, bytes32[] calldata bundleHashes) external;\n</code></pre>"},{"location":"Developers/interface/#bidder-interface","title":"Bidder Interface","text":"<p>Git Source</p>"},{"location":"Developers/interface/#functions_2","title":"Functions","text":""},{"location":"Developers/interface/#getbid","title":"getBid","text":"<p>Get the bid from a bidder for a specific slot and round.</p> <pre><code>function getBid(uint256 slot) external view returns (uint256[] memory packedBids);\n</code></pre> <p>Parameters</p> Name Type Description <code>slot</code> <code>uint256</code> The auction slot. <p>Returns</p> Name Type Description <code>packedBids</code> <code>uint256[]</code> Array of bids (in a packed format). uint256(uint128(bidPrice),uint120(itemsToBuy),uint8(bidderId))"},{"location":"Developers/mainnet/","title":"XGA L2 Mainnet","text":"<ul> <li>Live auction dashboard</li> <li>L2 Blockchain explorer</li> </ul>"},{"location":"Developers/mainnet/#node-operators","title":"Node Operators","text":"<p>Please coordinate with us to register your validator set with our registry service. We will provide you with the necessary information to get started.</p>"},{"location":"Developers/mainnet/#validators","title":"Validators","text":"<p>Connecting to the relay without being registered will result in your validator operating correctly so long as MEV Boost is also running.</p>"},{"location":"Developers/mainnet/#mainnet-information","title":"Mainnet Information","text":"<ul> <li> <p>L2 RPC:</p> <ul> <li>Description: L2 Node RPC</li> <li>URL:     https://xga-api.securerpc.com/v1</li> <li>Methods: eth_*</li> <li>ChainId: 7890785</li> <li>Limits: 300 req per minute per IP</li> </ul> </li> <li> <p>Beta bundle RPC:</p> <ul> <li>Description: Beta bundle submission RPC</li> <li>URL:     https://mainnet-auction.securerpc.com/</li> <li>Method: mev_sendBetaBundle</li> <li>Parameters:<ul> <li><code>txs</code>: List of txs as bundle e.g. [0x2323...,]</li> <li><code>slot</code>: slot number e.g. \"11282389\"</li> </ul> </li> <li>ChainId: 1</li> </ul> </li> </ul>"},{"location":"Developers/mainnet/#builders-and-searchers","title":"Builders and searchers","text":"<p>Aquire some Holesky Testnet ETH through a faucet in the resources listed below. If you are unable to secure enough, please reach out to us.</p>"},{"location":"Developers/mainnet/#contracts","title":"Contracts","text":"<p>L2 Auctioneer: <code>0x86Bc75A43704E38f0FD94BdA423C50071fE17c99</code></p> <p>L2 SettlementHouse: <code>0x80C5FfF824d14c87C799D6F90b7D8e0a715bd33C</code></p> <p>L1StandardBridgeProxy: <code>0x490B959870889D5FA0B329431683B8B3e850DD95</code></p> <p>To monetize yourself on L2, send some ETH on L1 to <code>0x490B959870889D5FA0B329431683B8B3e850DD95</code></p>"},{"location":"Developers/mainnet/#resources","title":"Resources","text":"<ul> <li>Block Explorers<ul> <li>etherscan.io</li> <li>beaconcha.in</li> </ul> </li> </ul>"},{"location":"Developers/payment-methods/","title":"Builder and Searcher payment methods","text":"<p>To further classify the payment methods, we can consider the broader context of Ethereum block building, including both traditional and MEV-Auction scenarios as it relates to payment mechanisms.</p> <p>This classification covers a range of payment methods from the simplest direct payments to more complex arrangements involving smart contracts and off-chain agreements.</p> <ol> <li> <p>Direct Payment Method</p> </li> <li> <p>Description: The most straightforward method where the block proposer     (validator) receives the transaction fees directly from the transactions     included in the block.</p> </li> <li> <p>Use Case: Commonly used in standard Ethereum block building.</p> </li> <li> <p>Coinbase Transfer Payment Method</p> </li> <li> <p>Description: In this method, the transaction fees and MEV rewards are     transferred directly to the block proposer's address via the coinbase     transaction.</p> </li> <li> <p>Use Case: Utilized in both traditional and MEV-Auction scenarios.</p> </li> <li> <p>Indirect Address Payment (IAP) Method</p> </li> <li> <p>Description: The builder uses a different address to pay the proposer     through an end-of-block transaction, separate from the address receiving the     block\u2019s transaction fees.</p> </li> <li> <p>Use Case: Specific to MEV-Auction, where builders and proposers are     distinct entities.</p> </li> <li> <p>Intermediate Transfer Payment (ITP) Methods</p> </li> <li> <p>Description: Involves a two-step process where the builder first     transfers the payment to an intermediary address, which then sends it to the     proposer.</p> </li> <li> <p>Use Case: Also specific to MEV-Auction, particularly when involving     smart contracts or third-party addresses.</p> </li> <li> <p>Smart Contract-Based Payment Method</p> </li> <li> <p>Description: Payments are handled through a smart contract, which can     programmatically distribute rewards based on predefined rules.</p> </li> <li> <p>Use Case: Useful in decentralized block building scenarios or when     complex payment distributions are required.</p> </li> <li> <p>Off-Chain Payment Method</p> </li> <li> <p>Description: Payment occurs outside the Ethereum blockchain, possibly     through other cryptocurrencies or traditional banking systems.</p> </li> <li>Use Case: Might be used in private agreements between parties involved     in block building.</li> </ol>","tags":["primary market","validators","builders","searchers","payment"]},{"location":"Developers/payment-methods/#builder-payment-methods","title":"Builder Payment Methods","text":"<p>Builder payment patterns in the context of MEV payments to the validators</p>","tags":["primary market","validators","builders","searchers","payment"]},{"location":"Developers/payment-methods/#indirect-address-payment-iap-method","title":"Indirect Address Payment (IAP) Method","text":"<p>This method involves the builder using a different address to pay the proposer through an end-of-block transaction. In this pattern, the builder first sets its own address to receive the block\u2019s transaction fees and then employs a different address to remunerate the proposer in the end-of-block transaction.</p>","tags":["primary market","validators","builders","searchers","payment"]},{"location":"Developers/payment-methods/#intermediate-transfer-payment-itp-method","title":"Intermediate Transfer Payment (ITP) Method","text":"<p>In this method, the builder pays the proposer through an end-of-block transaction, initially transferring the amount to an alternate address, which then initiates an internal transaction to send the funds to the proposer. This involves a two-step process where the payment is first sent to an intermediary address (like a smart contract) before reaching the proposer.</p>","tags":["primary market","validators","builders","searchers","payment"]},{"location":"Developers/sdk/","title":"Auction SDK","text":"<p>XGA auction winners are granted future block space via a token, which is used with submission of transactions for inclusion in the beta block. Budding bidders can register themselves with the protocol to participate in beta block auctions. Thereupon custom implementations will be required to bid and submit transactions. Technical details are provided herein.</p> <p>Technical Overview:</p> <ul> <li>Bidding:<ul> <li>Connect to L2 RPC</li> <li>Bridge eth to L2</li> <li>Understand auction contracts</li> <li>Deploy custom bidding strategy contract</li> </ul> </li> <li>Submitting bundles:<ul> <li>Beta Bundle RPC</li> <li>Bundle JSON Requests and Responses</li> </ul> </li> </ul> <p>Full working examples are available for:</p> <ul> <li>Zero latency open bidder contract</li> <li>Bundle submissions</li> </ul>"},{"location":"Developers/sdk/#bidding","title":"Bidding","text":""},{"location":"Developers/sdk/#l2-rpc","title":"L2 RPC","text":"<ul> <li> <p>L2 RPC:</p> <ul> <li>Description: L2 Node RPC</li> <li>URL:     https://xga-api.securerpc.com/v1</li> <li>Methods: eth_*</li> <li>ChainId: 7890785</li> </ul> </li> <li> <p>L2 RPC (TESTNET):</p> <ul> <li>Description: L2 Node RPC (Testnet)</li> <li>URL:     https://holesky-api.securerpc.com/l2</li> <li>Methods: eth_*</li> <li>ChainId: 42169</li> </ul> </li> </ul>"},{"location":"Developers/sdk/#l1-bridge","title":"L1 Bridge","text":"<p>Fund L2 address by sending ETH to the L1 bridge address.</p>"},{"location":"Developers/sdk/#deployed-address","title":"Deployed Address","text":"<pre><code>L1_BRIDGE=\"0x490B959870889D5FA0B329431683B8B3e850DD95\"\n</code></pre>"},{"location":"Developers/sdk/#deployed-address-testnet","title":"Deployed Address (Testnet)","text":"<pre><code>L1_BRIDGE=\"0x3Ae5Ca0B05bE12d4FF9983Ed70D86de9C34e820C\"\n</code></pre>"},{"location":"Developers/sdk/#weth","title":"WETH","text":""},{"location":"Developers/sdk/#deployed-address-mainnet-and-testnet","title":"Deployed Address (Mainnet and Testnet)","text":"<pre><code>WETH=\"0x4200000000000000000000000000000000000006\"\n</code></pre>"},{"location":"Developers/sdk/#auction-contracts","title":"Auction Contracts","text":""},{"location":"Developers/sdk/#deployed-addresses","title":"Deployed Addresses","text":"<pre><code>AUCTIONEER=\"0x86Bc75A43704E38f0FD94BdA423C50071fE17c99\"\nSETTLEMENT=\"0x80C5FfF824d14c87C799D6F90b7D8e0a715bd33C\"\n</code></pre>"},{"location":"Developers/sdk/#deployed-addresses-testnet","title":"Deployed Addresses (Testnet)","text":"<pre><code>AUCTIONEER=\"0xD88e271AD39dAb4DEB0f7f9475d993ed4Bf5029b\"\nSETTLEMENT=\"0x7Ac1A452B59114Fb1E67470720343A2e9AE18297\"\n</code></pre>"},{"location":"Developers/sdk/#registering-a-bidder","title":"Registering a bidder","text":"<p>Only registered bidders can participate in the auction. Operators can onboard new bidders through the contract.</p> <p>To check for bidderId when registered, call <code>IdMap</code> on the contract:</p> <pre><code>function IdMap(address bidder) external view returns (uint8 id);\n</code></pre>"},{"location":"Developers/sdk/#packing-a-bid","title":"Packing a bid","text":"<p>Bids are packed by price, amount, bidderId</p> <pre><code>    /**\n     * @dev Packed Bid details into a uint256 for submission.\n     *\n     * @param bidPrice Price per item.\n     * @param itemsToBuy Items to buy in the auction.\n     * @param bidderId Id for bidder\n     * @return packedBid for auction submission\n     */\n    function packBid(uint256 bidPrice, uint256 itemsToBuy, uint256 bidderId)\n        external\n        pure\n        returns (uint256 packedBid);\n</code></pre>"},{"location":"Developers/sdk/#winning-bid-info","title":"Winning bid info","text":"<p>After an auction is closed, bidders can query their bid results:</p> <pre><code>    /**\n     * @dev Retrieve information about a bidder after auction settlement.\n     *\n     * @param slot The slot identifier of the auction.\n     * @param bidder The address of the bidder for whom information is requested.\n     * @return itemsBought The number of items bought by the bidder in the specified auction.\n     * @return amountOwed The amount owed by the bidder for the items bought in the specified auction.\n     *\n     * Requirements:\n     * - The auction must have been settled.\n     * - The provided `bidder` address must be valid and have participated in the auction.\n     *\n     */\n    function getBidderInfo(uint256 slot, address bidder)\n        external\n        view\n        returns (uint120 itemsBought, uint128 amountOwed);\n</code></pre>"},{"location":"Developers/sdk/#bidder-contracts","title":"Bidder Contracts","text":"<p>A minimal viable bidder is provided below. A more sophisticated fill or kill open bidder contract is provided.</p> <pre><code>/// SPDX-License-Identifier: UPL-1.0\npragma solidity ^0.8.25;\n\nimport {WETH} from \"solmate/tokens/WETH.sol\";\nimport {ERC6909} from \"solmate/tokens/ERC6909.sol\";\n\ninterface SettlementHouse {\n    function submitBundle(uint256 slot, uint256 amount, bytes32[] calldata hashes) external;\n}\n\n/// @title MockBidder\ncontract MockBidder {\n    uint256[] public bids;\n    ERC6909 auctioneer;\n    SettlementHouse house;\n    WETH weth;\n\n    constructor(WETH _weth, address _auctioneer, address settlement) {\n        weth = _weth;\n        auctioneer = ERC6909(_auctioneer);\n        house = SettlementHouse(settlement);\n        weth.approve(_auctioneer, type(uint256).max);\n    }\n\n    function setBids(uint256[] memory newBids) public {\n        bids = newBids;\n    }\n\n    function getBid(uint256) external view returns (uint256[] memory packedBids) {\n        return bids;\n    }\n\n    function submit(uint256 slot, uint256 amount, bytes32[] calldata hashes) external {\n        auctioneer.approve(address(house), slot, amount);\n        house.submitBundle(slot, amount, hashes);\n    }\n}\n</code></pre>"},{"location":"Developers/sdk/#submitting-bundles","title":"Submitting bundles","text":""},{"location":"Developers/sdk/#beta-bundle-rpc","title":"Beta Bundle RPC","text":"<ul> <li> <p>Beta bundle RPC:</p> <ul> <li>Description: Beta bundle submission RPC</li> <li>URL:     https://mainnet-auction.securerpc.com/</li> <li>Method: mev_sendBetaBundle</li> <li>Parameters:<ul> <li><code>txs</code>: List of txs as bundle e.g. [0x2323...,]</li> <li><code>slot</code>: slot number e.g. \"11282389\"</li> </ul> </li> <li>ChainId: 1</li> </ul> </li> <li> <p>Beta bundle RPC (Testnet):</p> <ul> <li>Description: Beta bundle submission RPC</li> <li>URL:     https://holesky-api.securerpc.com/v2</li> <li>Method: mev_sendBetaBundle</li> <li>Parameters:<ul> <li><code>txs</code>: List of txs as bundle e.g. [0x2323...,]</li> <li><code>slot</code>: slot number e.g. \"11282389\"</li> </ul> </li> <li>ChainId: 17000</li> </ul> </li> </ul>"},{"location":"Developers/sdk/#bundle-json-requests-and-responses","title":"Bundle JSON Requests and Responses","text":""},{"location":"Developers/sdk/#example-json-request","title":"Example JSON request","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"mev_sendBetaBundle\",\n    \"params\": [\n      {\n        \"txs\": [0x... ],\n        \"slot\": \"1001\"\n      }\n    ],\n    \"id\": 8\n}\n</code></pre>"},{"location":"Developers/sdk/#example-json-response","title":"Example JSON response","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"mev_sendBetaBundle\",\n    \"result\": \"0x79e5cba7876f532218ac35a357209800be2362dd2e3f1e6dc5974698f0d7cee4\",\n}\n</code></pre>"},{"location":"Developers/sdk/#bundler-examples","title":"Bundler Examples","text":"<ul> <li>Python bundler - employs     a deployed bidder contract for continuous automated bidding, while listening     for auction close event, then submits the bundle</li> </ul>"},{"location":"Developers/testnet/","title":"XGA L2 Testnet","text":"<ul> <li>Live auction dashboard</li> <li>L2 Blockchain explorer</li> </ul>"},{"location":"Developers/testnet/#node-operators","title":"Node Operators","text":"<p>Please coordinate with us to register your validator set with our registry service. We will provide you with the necessary information to get started.</p>"},{"location":"Developers/testnet/#validators","title":"Validators","text":"<p>Connecting to the relay without being registered will result in your validator operating correctly so long as MEV Boost is also running.</p>"},{"location":"Developers/testnet/#holesky-information","title":"Holesky Information","text":"<ul> <li> <p>L2 RPC (TESTNET):</p> <ul> <li>Description: L2 Node RPC (Testnet)</li> <li>URL:     https://holesky-api.securerpc.com/l2</li> <li>Methods: eth_*</li> <li>ChainId: 42169</li> </ul> </li> <li> <p>Beta bundle RPC (Testnet):</p> <ul> <li>Description: Beta bundle submission RPC</li> <li>URL:     https://holesky-api.securerpc.com/v2</li> <li>Method: mev_sendBetaBundle</li> <li>Parameters:<ul> <li><code>txs</code>: List of txs as bundle e.g. [0x2323...,]</li> <li><code>slot</code>: slot number e.g. \"11282389\"</li> </ul> </li> <li>ChainId: 17000</li> </ul> </li> </ul>"},{"location":"Developers/testnet/#builders-and-searchers","title":"Builders and searchers","text":"<p>Aquire some Holesky Testnet ETH through a faucet in the resources listed below. If you are unable to secure enough, please reach out to us.</p>"},{"location":"Developers/testnet/#contracts","title":"Contracts","text":"<p>L2 Auctioneer: <code>0xD88e271AD39dAb4DEB0f7f9475d993ed4Bf5029b</code></p> <p>L2 SettlementHouse: <code>0x7Ac1A452B59114Fb1E67470720343A2e9AE18297</code></p> <p>L1StandardBridgeProxy: <code>0x3Ae5Ca0B05bE12d4FF9983Ed70D86de9C34e820C</code></p> <p>To monetize yourself on L2, send some ETH on L1 (Holesky) to <code>0x3Ae5Ca0B05bE12d4FF9983Ed70D86de9C34e820C</code></p>"},{"location":"Developers/testnet/#resources","title":"Resources","text":"<ul> <li>Block Explorers<ul> <li>holesky.etherscan.io</li> <li>holesky.beaconcha.in</li> <li>dora-holesky.pk910.de</li> </ul> </li> <li>Ethstats:     ethstats.holesky.ethpandaops.io</li> <li>Faucets:<ul> <li>holesky-faucet.pk910.de</li> <li>QuickNode Faucet</li> <li>Chainstack Faucet</li> <li>Automata Holesky Faucet</li> </ul> </li> </ul>"},{"location":"Learning/Forward-Contracts/","title":"Forward Contracts","text":"","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Learning/Forward-Contracts/#forward-contracts","title":"Forward Contracts","text":"","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Learning/Forward-Contracts/#nature-of-the-forwards-to-be-sold","title":"Nature of the Forwards to be sold","text":"<p>The embedded volumetric optionality is primarily intended, at the time that the parties enter into the agreement, contract, or transaction, to address constraint factors that influence demand for transaction inclusion rights (i.e. blockspace). This instrument addresses the potential variability in the supply of available blockspace available for usage by different actors.</p> <p>The options refer to slices of the overall gas size of \u03b2-blockspace. We aim to homogenize it, i.e. all slices of gas are equal and interchangeable. This is how the forward contract is exercised.</p> <p>The nature of the forwards we are selling under the \u03b2-blockspace market depends on the capacity restriction we impose. Most importantly, do we guarantee enough capacity that the calls get included or not? The problem with guaranteeing a fixed capacity for \u03b2-blockspace is that this means restricting the capacity for \u237a-blockspace. The problem with this is that \u237a-blockspace might be more lucrative for us. In particular, we know that lottery blocks come along that make up a large chunk of the overall remuneration we can achieve at all.</p> <p>Figure 1: Tradeoff of \u237a/\u03b2-blockspace</p> <p>If we fix \u237a-blockspace, we might be missing a significant amount of value. The tradeoff can be seen in the picture below.</p> <p></p> <p>We make the assumption that top of the block gas space is more valuable. The main assumption is that at some point, the marginal value for a builder owning the whole block (green) goes below the marginal value of a \u03b2-blockspace buyer (typically someone who wants to be just included independently of the order).</p> <p>If we had perfect information, we could fix the capacity constraint at exactly the intersection point. But this information is not available. We can only approximate it. The question of lottery blocks can also be seen in the diagram, the question is whether for such a block both curves are shifted in the same way. If not, it would indicate the need to give \u237a-blockspace builders more space relative to \u03b2-blockspace builders.</p>","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Learning/Forward-Contracts/#bidder-characteristics","title":"Bidder characteristics","text":"<p>Assumption of Intrablock Position</p> <p>We operate under the assumption that position does not matter; if it does might affect the design significantly.</p> <ul> <li> <p>Bidders are possibly risk-averse: Standard revenue equivalence might go     out of the window. Bidders are asymmetric; in particular if there is private     orderflow.</p> </li> <li> <p>Bidders valuations are not clear: If they draw from a public mempool or     if there are global conditions affecting value of block space, their     valuations will be interdependent. - There is also the danger of a further     coordination issue; this might favor a winner-takes-all solution</p> </li> </ul>","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Learning/Forward-Contracts/#relation-to-the-secondary-market","title":"Relation to the secondary market","text":"<p>Traditionally we would assume that a well-designed auction does not require a secondary market. If the result of the auction is in the core, no change in the allocation makes sense. This is different here as information comes in overtime. - Base fee - Transactions updates for \u237a-blockspace bidders We operate under the assumption that position does not matter; if it does might affect the design significantly.</p> <p>New bidders are active on the secondary market. The secondary market therefore is not just a reallocation of the primary auction but includes information updates.</p> <p>Secondary Market Effects</p> <p>This is in contrast to most work on auctions with resale (re: secondary) markets. The secondary market changes the rationale for bidding in the primary auction</p>","tags":["Forward Contracts","gas auction","mechanism design"]},{"location":"Learning/aup_auction/","title":"Augmented Uniform Price Auction","text":"","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/aup_auction/#specification-for-primary-market","title":"Specification for Primary Market","text":"<p>We are augmenting the standard uniform price auction format with two features:</p> <ol> <li> <p>Instead of providing a perfectly inelastic supply (also known as a fixed     amount that we auction off), we offer an elastic supply schedule: If the     price is very low, we will offer only limited amounts of options.</p> </li> <li> <p>We introduce a different tie-breaking rule for excess demand. Owing to the     discrete nature of bids, situations can arise where no market-clearing price     exists (where demand equals supply). While the typical rule in many auctions     prioritizes high marginal bids first, we propose an alternative that exerts     more pressure at the marginal quantity level.</p> </li> </ol> <p>We explain the rationale behind these two features below.</p> <p>Before we delve into the details, let us address the issue with the standard uniform price auction. When the supply is fixed, or perfectly inelastic, there is a risk of resulting in very low prices. This concept, well understood since the work of Wilson (1979), highlights that bidders are incentivized to understate their bids, a common challenge in most multi-unit auctions. In the uniform price auction, the tradeoff is evident: if you lower your bid for the marginal unit, not only do you reduce your price for that unit, but if you win, you also decrease the overall price you pay.</p> <p>Now, the overall effect and danger of severe under-pricing is contingent on demand factors. It cannot be easily inferred from data. It is also well understood that there is no clear way to tell whether the discriminatory or uniform price auction provides more revenue, neither theoretically (Ausubel et al. 2011) nor empirically.</p>","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/aup_auction/#elastic-supply-curve","title":"Elastic supply curve","text":"<ul> <li> <p>Fix the max capacity of beta, \\(q^{max}\\). We assume this is given for the     auction. Obviously, it can be a parameter that we will optimize over time.</p> </li> <li> <p>The supply curve, \\(S \\colon P \\to Q\\), where \\(P\\) is the set of allowed     prices; and \\(Q\\) the set of available options. It gives for each price the     amount of gas space we offer.</p> </li> <li> <p>The set of options will be determined by the tick size we provide. \\(Q\\) will     be further limited by the max capacity we offer. That is, typically,</p> </li> </ul> \\[ Q=0, t_q, 2 t_q, \\ldots, q^{\\max } \\text { where } t_q \\] \\[ t_q=q^{\\max } / k \\] <p>for some \\(k \\in N\\).</p> <ul> <li> <p>The idea for the shape of the supply function is to have an initial segment     of the supply curve which is concave and a second segment that then only     provides a constant amount. This is the maximally available capacity. Below     are pictures, that will make this clearer.</p> </li> <li> <p>Concretely, one parameterized functional form is this:</p> </li> </ul> \\[ S(p) = \\begin{cases} s(p)  &amp; \\text{for } p &lt; p' \\\\ s(p') &amp; \\text{for } p &gt;= p' \\end{cases} \\] <p>where $ s(p) $</p> \\[ s(p) = ap^n \\] <p>where \\(a,n\\) are constants. The idea, again, is that the function is concave and thereby monotonically increasing until price \\(p'\\).</p> <p>This price is calculated by setting the max quantity, \\(q^{max} = ap^n\\), and then deriving</p> \\[  p' \\equiv (q^{max} / a)^{1/n} \\] <p>NOTE: It goes without saying that the functional form above is up for change if we want to.</p> <p>NOTE: It is theoretically well understood that an elastic supply curve can reduce the danger of dramatically underpricing. In practice, this is not so often used. One reason can be that the value of the good might be lower for the auctioneer.</p> <p>In our case, however, this can be different. The reason is that we possibly have use for the space ourselves. So, as remarked above, we might have a positive outside value and might not be willing to sell for any price.</p>","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/aup_auction/#bidders","title":"Bidders","text":"<p>Each bidder can submit several (quantity,price) pairs. We thereby elicit his (partial) demand function \\(d_i(p) \\colon P \\to Q\\).</p>","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/aup_auction/#aggregation-of-demand","title":"Aggregation of demand","text":"<p>The way that a uniform auction proceeds is by aggregating demand and matching it to supply. This allows to determine a market clearing price - if it exists. Reasons for non-existence can be increasing demand curves.</p> <p>Now, first, consider the aggregate demand:</p> \\[ D(p) \\equiv \\sum_j d_j(p) \\] <p>Fix the highest price at which the all the demand can be satisfied (if it exists). That is,</p> \\[ p^{*}=max\\{p|D(p)=S(p)\\} \\] <p>Note, in the case where there is excess demand for this price, i.e. \\(D(p^{*})&gt;S(p^{*})\\), we need an allocation rule that determines who gets what.</p> <p>Note, if demand schedules \\(d_j(p)\\) were continuous, then excess demand would not be feasible.</p> <p>Lastly note, that the fact that actual bids are discontinuous might reduce the likelihood of a low price outcome (Kastl 2011).</p>","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/aup_auction/#allocation-rule","title":"Allocation rule","text":"<p>In case of excess demand, how is the excess demand cleared?</p> <p>The standard rule is higher price, higher priority:</p> \\[ q_j = d_{j,\\&gt;}(p^{*}) + \\frac{d_{j}(p^{ *})- d_{j,&gt;}(p^{*})}{D_{j}(p^{ *})- D_{j,&gt;}(p^{*})} \\] <p>where \\(d_{j,\\&gt;}(p^{*})\\) is the individual demand of \\(j\\) for higher prices than \\(p^{*}\\) and \\(D_{j,&gt;}(p^{*}\\) is the aggregate demand at prices higher than \\(p^{*}\\).</p> <p>So, an agent first gets his demand that he stated at higher prices. Then he will receive a relative share of the remaining excess demand at the market clearing price.</p> <p>There is an alternative allocation rule though:</p> <p>Give a share relative to individual demand at that point. That is,</p> \\[ q_i = d_i(p^{**})/D(p^{**}) \\] <p>Which means the larger the demand relative to overall demand at that price, the larger the share that a player will get. In contrast to the rule above, only the marginal demand matters; demand stated at higher demand levels are irrelevant.</p> <p>Reflection</p> <p>This creates stronger incentives to bid closer to true valuations; it reduces the tendency to end up</p> <p>in a low price equilibrium.</p>","tags":["primary market","price auction","auction format","gas auction","mechanism design"]},{"location":"Learning/flashbots-comparison/","title":"Flashbots Comparison","text":"","tags":["flashbots","sgx","auction format","suave","mev boost"]},{"location":"Learning/flashbots-comparison/#mev-boost","title":"MEV Boost","text":"<pre><code>sequenceDiagram\n    participant consensus\n    participant mev_boost\n    participant execution\n    participant relays\n    Title: Block Proposal\n    Note over consensus: wait for allocated slot\n    consensus-&gt;&gt;mev_boost: engine_forkchoiceUpdatedV1\n    mev_boost-&gt;&gt;execution: engine_forkchoiceUpdatedV1\n    mev_boost-&gt;&gt;relays: engine_forkchoiceUpdatedV1\n    Note over mev_boost: begin polling\n    mev_boost-&gt;&gt;relays: relay_getPayloadHeaderV1\n    consensus-&gt;&gt;mev_boost: builder_getPayloadHeaderV1\n    mev_boost-&gt;&gt;execution: engine_getPayloadV1\n    Note over mev_boost: select best payload\n    mev_boost--&gt;&gt;consensus: builder_getPayloadHeaderV1 response\n    Note over consensus: sign the block\n    consensus-&gt;&gt;mev_boost: builder_proposeBlindedBlockV1\n    Note over mev_boost: identify payload source\n    mev_boost-&gt;&gt;relays: relay_proposeBlindedBlockV1\n    Note over relays: validate signature\n    relays--&gt;&gt;mev_boost: relay_proposeBlindedBlockV1 response\n    mev_boost--&gt;&gt;consensus: builder_proposeBlindedBlockV1 response</code></pre>","tags":["flashbots","sgx","auction format","suave","mev boost"]},{"location":"Learning/flashbots-comparison/#suave-sgx","title":"Suave SGX","text":"<p>Suave specification is in development, so terms may not be finalized.</p> <pre><code>sequenceDiagram\n    participant Discovery\n    participant Searcher\n    participant Kettle_SGX as \"Kettle SGX\"\n    participant Validators\n    participant Execution_Client_SGX as \"Execution Client SGX\"\n\n    Discovery-&gt;&gt;Discovery: A registry exists\n    Discovery-&gt;&gt;Discovery: Discover each other through a registry\n    Discovery-&gt;&gt;Discovery: Perform handshake and verify attestations\n\n    Searcher-&gt;&gt;Searcher: Finds MEV and crafts bundle\n    Searcher-&gt;&gt;Searcher: Passes bundle to modified Ethereum node\n    Searcher-&gt;&gt;Searcher: Node generates block with bundle\n    Searcher-&gt;&gt;Searcher: Generates block witness and truncated header hash\n\n    Kettle_SGX-&gt;&gt;Kettle_SGX: Inputs into SGX\n    Kettle_SGX-&gt;&gt;Kettle_SGX: Uses block witness to verify block\n    Kettle_SGX-&gt;&gt;Kettle_SGX: Verifies coinbase difference\n    Kettle_SGX-&gt;&gt;Kettle_SGX: Encrypts block for validator\n\n    Validators-&gt;&gt;Validators: Verifies block signed by searcher\n    Validators-&gt;&gt;Validators: Chooses most profitable block\n    Validators-&gt;&gt;Execution_Client_SGX: Proposes block with attestation\n\n    Execution_Client_SGX-&gt;&gt;Execution_Client_SGX: Executes transactions and proposes block\n    Execution_Client_SGX-&gt;&gt;Validators: Sends proposed block\n\n    Validators-&gt;&gt;Validators: Attest to the proposed block\n    Validators-&gt;&gt;Validators: Final</code></pre>","tags":["flashbots","sgx","auction format","suave","mev boost"]},{"location":"Learning/secondary-market/","title":"Secondary Market","text":"","tags":["secondary market","gas auction","mechanism design"]},{"location":"Learning/secondary-market/#secondary-market","title":"Secondary Market","text":"<p>The structure the secondary market so that a concentrated selling back is feasible</p> <p>The main purpose of this market is to account for information differences over time - builders might realize they cannot fill a block; or they might need more space The base fee is not known at the time of the primary market; so there should be updates regarding the base fee happening with before-strike-time blocks being minted. This also affects the initial pricing we offer.</p> <p>!!! info inline \"Allocation subject to change\" It is unclear what allocation we will have from the primary market, as a winner-takes all is possible</p>","tags":["secondary market","gas auction","mechanism design"]},{"location":"Legal/","title":"Legal","text":""},{"location":"Legal/#notices-and-compliance","title":"Notices and Compliance","text":""},{"location":"Legal/CDD/","title":"Market Participant Requirements","text":""},{"location":"Legal/CDD/#customer-due-diligence-cdd","title":"Customer Due Diligence (CDD)","text":"<ul> <li>Verification Procedures: We conduct thorough identity verification for     new customers using government-issued documents, biometric verification, or     third-party verification services.</li> <li>Enhanced Due Diligence (EDD): For higher-risk clients, we perform     enhanced due diligence, including the source of funds, to identify potential     sanctions risks.</li> <li>Automated Screening Tools: We screen transactions and parties against     global sanctions lists (e.g., OFAC) in real-time to prevent unauthorized     transactions.</li> <li>Global IP Denylist: We block IP Addresses from Government affiliated     entities, as well.</li> <li>Regular List Updates: We ensure that our screening tool is updated     regularly to reflect changes in sanctions lists. We maintain and monitor     addresses from the     Specially Designated Nationals (SDN) list\u00a0of     the US Office of Foreign Asset Control. We maintain an open source tool that     automates the update process for new addresses, which can be found here:     sambacha/ofac-list</li> </ul>"},{"location":"Legal/Content-Disclaimer/","title":"Content Disclaimer","text":""},{"location":"Legal/Content-Disclaimer/#disclaimer","title":"Disclaimer","text":"<p>Full Copyright Statement</p> <p>Copyright (C) Manifold Finance, Incorporated (2024). All Rights Reserved.</p> <p>This document and translations of it may be copied and furnished to others, and derivative works that comment on or otherwise explain it or assist in its implementation may be prepared, copied, published and distributed, in whole or in part, without restriction of any kind, provided that the above copyright notice and this paragraph are included on all such copies and derivative works. However, this document itself may not be modified in any way, such as by removing the copyright notice or references to the Manifold Finance, Inc. or other relevant organizations, except as needed for the purpose of developing EIP/ERC standards within the Ethereum ecosystem, in which case the procedures for copyrights defined in the development process must be followed, or as required.</p> <p>This document and the information contained herein is provided on an \"AS IS\" basis and MANIFOLD FINANCE, INCORPORATED AND ITS CONTRIBUTORS DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.</p>"},{"location":"Legal/Disclosure-Statement/","title":"Disclosue Statement","text":""},{"location":"Legal/Disclosure-Statement/#nfa-disclosure-statement","title":"NFA Disclosure Statement","text":"<p>Although the material contained in this website was prepared based on information from public and private sources that and/or Manifold Finance, Inc believes to be reliable, no representation, warranty or undertaking, stated or implied, is given as to the accuracy of the information contained herein, CommodityStream LLC and/or Manifold Finance, Inc expressly disclaims any liability for the accuracy and completeness of information contained in this website and/or social media posting.</p> <p>This website is distributed for general informational and educational purposes only and is not intended to constitute legal, tax, accounting or investment advice. The information, opinions and views contained herein have not been tailored to the investment objectives of any one individual, are current only as of the date hereof and may be subject to change at any time without prior notice. CommodityStream LLC and/or Manifold Finance, Inc and/or Manifold Finance, Inc does not have any obligation to provide revised opinions in the event of changed circumstances. All investment strategies and investments involve risk of loss. Nothing contained in this website should be construed as investment advice. Any reference to an investment\u2019s past or potential performance is not, and should not be construed as, a recommendation or as a guarantee of any specific outcome or profit.</p> <p>Any ideas or strategies discussed herein should not be undertaken by any individual without prior consultation with a financial professional for the purpose of assessing whether the ideas or strategies that are discussed are suitable to you based on your own personal financial objectives, needs and risk tolerance. CommodityStream LLC and/or Manifold Finance, Inc expressly disclaims any liability or loss incurred by any person who acts on the information, ideas or strategies discussed herein.</p> <p>The information contained herein is not, and shall not constitute an offer to sell, a solicitation of an offer to buy or an offer to purchase any securities, nor should it be deemed to be an offer, or a solicitation of an offer, to purchase or sell any investment product or service.</p>"},{"location":"Reference/constants/","title":"Constants","text":""},{"location":"Reference/constants/#gwei-values","title":"Gwei values","text":"Name Value <code>MIN_DEPOSIT_AMOUNT</code> <code>Gwei(2**0 * 10**9)</code> (= 1,000,000,000) <code>MAX_EFFECTIVE_BALANCE</code> <code>Gwei(2**5 * 10**9)</code> (= 32,000,000,000) <code>EFFECTIVE_BALANCE_INCREMENT</code> <code>Gwei(2**0 * 10**9)</code> (= 1,000,000,000)"},{"location":"Reference/constants/#time-parameters","title":"Time parameters","text":"Name Value Unit Duration <code>MIN_ATTESTATION_INCLUSION_DELAY</code> <code>uint64(2**0)</code> (= 1) slots 12 seconds <code>SLOTS_PER_EPOCH</code> <code>uint64(2**5)</code> (= 32) slots 6.4 minutes <code>MIN_SEED_LOOKAHEAD</code> <code>uint64(2**0)</code> (= 1) epochs 6.4 minutes <code>MAX_SEED_LOOKAHEAD</code> <code>uint64(2**2)</code> (= 4) epochs 25.6 minutes <code>MIN_EPOCHS_TO_INACTIVITY_PENALTY</code> <code>uint64(2**2)</code> (= 4) epochs 25.6 minutes <code>EPOCHS_PER_ETH1_VOTING_PERIOD</code> <code>uint64(2**6)</code> (= 64) epochs ~6.8 hours <code>SLOTS_PER_HISTORICAL_ROOT</code> <code>uint64(2**13)</code> (= 8,192) slots ~27 hours"},{"location":"Reference/constants/#time-parameters_1","title":"Time parameters","text":"Name Value Unit Duration <code>SECONDS_PER_SLOT</code> <code>uint64(12)</code> seconds 12 seconds <code>SECONDS_PER_ETH1_BLOCK</code> <code>uint64(14)</code> seconds 14 seconds <code>MIN_VALIDATOR_WITHDRAWABILITY_DELAY</code> <code>uint64(2**8)</code> (= 256) epochs ~27 hours <code>SHARD_COMMITTEE_PERIOD</code> <code>uint64(2**8)</code> (= 256) epochs ~27 hours <code>ETH1_FOLLOW_DISTANCE</code> <code>uint64(2**11)</code> (= 2,048) Eth1 blocks ~8 hours <pre><code># https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#misc\nFAR_FUTURE_EPOCH = 2 ** 64 - 1\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#time-parameters-1\nMIN_VALIDATOR_WITHDRAWABILITY_DELAY = 2**8\nSHARD_COMMITTEE_PERIOD = 256\nMAX_SEED_LOOKAHEAD = 4\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#state-list-lengths\nEPOCHS_PER_SLASHINGS_VECTOR = 2**13\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#rewards-and-penalties\nPROPORTIONAL_SLASHING_MULTIPLIER_BELLATRIX = 3\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#gwei-values\nEFFECTIVE_BALANCE_INCREMENT = 2 ** 0 * 10 ** 9\nMAX_EFFECTIVE_BALANCE = 32 * 10 ** 9\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#execution\nMAX_WITHDRAWALS_PER_PAYLOAD = 2 ** 4\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#withdrawal-prefixes\nETH1_ADDRESS_WITHDRAWAL_PREFIX = '0x01'\n# https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator-cycle\nMIN_PER_EPOCH_CHURN_LIMIT = 2 ** 2\nCHURN_LIMIT_QUOTIENT = 2 ** 16\n\n# Local constants\nGWEI_TO_WEI = 10 ** 9\nSHARE_RATE_PRECISION_E27 = 10**27\nTOTAL_BASIS_POINTS = 10000\n\nMAX_BLOCK_GAS_LIMIT = 30_000_000\n</code></pre>"},{"location":"Reference/contract_design/","title":"Auction and Market Designs","text":""},{"location":"Reference/contract_design/#market-and-auction-design-and-structure","title":"Market and Auction Design and Structure","text":""},{"location":"Reference/contract_design/#alpha","title":"Alpha","text":"<p>We will keep the alpha part as is for now. We do not want to impose a new format on bidders as given our small size might mean being ignored. The only change is the restriction of gas to 25MM. (The rest goes to the beta market).</p> <p>Tip</p> <p>This means that the auction is backwards compatible with MEV Boost</p>"},{"location":"Reference/contract_design/#beta","title":"Beta","text":"<p>We will go with a discriminatory auction first.</p> <p>Warning</p> <p>It is understood though that we adapt the auction format depending on: (i) feedback by potential bidders (ii) actual behavior in the market.</p> <p>We will restrict the residual claim only to full bids for now.</p> <p>This is to avoid too small of token allocations that are then practically of no use.</p> <p>The main reasons are:</p> <ul> <li>Simple and familiar format</li> <li>In principle compatible with a secondary market</li> <li>But first and foremost: Want to get feedback from bidders how they bid.</li> </ul>"},{"location":"Reference/contract_design/#contingencies","title":"Contingencies","text":"<ol> <li>Depending on the step bidding, we increase the token size.</li> <li>If we observe bidding on whole blocks only (or close to it), we can simplify    the whole setup dramatically.</li> <li>If we observe upward sloping demand curves, we might need to change the    format completely.</li> </ol>"},{"location":"Reference/contract_design/#secondary-market","title":"Secondary market","text":"<ul> <li>Market running after primary allocation took place</li> <li> <p>Need to think whether we should provide the marketplace ourselves</p> <ul> <li>In principle could be handled by external parties</li> <li>But the interlocking of different markets (that the timing of spot     market and secondary market is making sense) is probably relevant and     easier to orchestrate by us.</li> </ul> </li> <li> <p>The main purpose of this market is to account for information differences     over time - e.g. builders might realize they cannot fill a block; or they     might need more space.</p> </li> <li> <p>The base fee is not known at the time of the primary market;so there should     be updates regarding the base fee happening with before-strike-time blocks     being minted. This also affects the initial pricing we offer.</p> </li> </ul>"},{"location":"Reference/contract_summary/","title":"Contract Protocol summary","text":""},{"location":"Reference/contract_summary/#primary-market","title":"Primary Market","text":"<p>The Auctioneer Contract is a Solidity smart contract that implements an auction mechanism for selling block space. This contract allows bidders to participate in auctions, submit manual bids, and settle the auctions. It supports multiple bidders, each with a unique ID.</p>"},{"location":"Reference/contract_summary/#key-features","title":"Key Features","text":"<ul> <li>Bidders: Add and remove bidders dynamically.</li> <li>Auctions: Open and run auctions for selling block space.</li> <li>Manual Bids: Bidders can submit manual bids with specific quantities and     prices.</li> <li>Settlement: After the auction, settle with successful bidders,     transferring owed amounts.</li> </ul>"},{"location":"Reference/contract_summary/#contract-structure","title":"Contract Structure","text":"<ul> <li>The contract is based on the ERC6909 standard.</li> <li>It uses the SafeTransferLib for safe WETH (Wrapped Ether) transfers.</li> <li>Bidders can participate through the <code>getBid</code> function.</li> <li>Manual bids are supported via the <code>bid</code> function.</li> </ul>"},{"location":"Reference/contract_summary/#events","title":"Events","text":"<ul> <li><code>BidderAdded</code> and <code>BidderRemoved</code> for dynamic management of bidders.</li> <li><code>AuctionOpened</code> signals the start of a new auction.</li> <li><code>ManualBidSubmitted</code> is emitted when a bidder submits a manual bid.</li> <li><code>AuctionSettled</code> indicates the successful settlement of an auction.</li> </ul>"},{"location":"Reference/contract_summary/#errors","title":"Errors","text":"<ul> <li>Various error messages to handle exceptional cases, such as invalid bids or     insufficient funds.</li> </ul>"},{"location":"Reference/contract_summary/#functions","title":"Functions","text":"<ul> <li>newBidder: Add a new bidder to the auction.</li> <li>removeBidder: Remove a bidder from the auction.</li> <li>openAuction: Open a new auction for a specific slot.</li> <li>bid: Submit a bid for a specific auction slot.</li> <li>run: Execute the auction for a specific slot, considering manual and     contract bids.</li> <li>settle: Settle the auction by transferring owed amounts to successful     bidders.</li> <li>getBidderInfo: Retrieve information about a bidder after auction     settlement.</li> <li>packBid: Pack bid details into a uint256 for submission.</li> <li>decodeBid: Decode packed bid information for analysis.</li> <li>checkBid: Check the validity of a bid before execution.</li> </ul>"},{"location":"Reference/erc6909/","title":"ERC6909 Interface","text":""},{"location":"Reference/erc6909/#functions","title":"Functions","text":""},{"location":"Reference/erc6909/#balanceof","title":"balanceOf","text":"<p>Owner balance of an id.</p> <pre><code>function balanceOf(address owner, uint256 id) external view returns (uint256 amount);\n</code></pre> <p>Parameters</p> Name Type Description <code>owner</code> <code>address</code> The address of the owner. <code>id</code> <code>uint256</code> The id of the token. <p>Returns</p> Name Type Description <code>amount</code> <code>uint256</code> The balance of the token."},{"location":"Reference/erc6909/#allowance","title":"allowance","text":"<p>Spender allowance of an id.</p> <pre><code>function allowance(address owner, address spender, uint256 id) external view returns (uint256 amount);\n</code></pre> <p>Parameters</p> Name Type Description <code>owner</code> <code>address</code> The address of the owner. <code>spender</code> <code>address</code> The address of the spender. <code>id</code> <code>uint256</code> The id of the token. <p>Returns</p> Name Type Description <code>amount</code> <code>uint256</code> The allowance of the token."},{"location":"Reference/erc6909/#isoperator","title":"isOperator","text":"<p>Checks if a spender is approved by an owner as an operator</p> <pre><code>function isOperator(address owner, address spender) external view returns (bool approved);\n</code></pre> <p>Parameters</p> Name Type Description <code>owner</code> <code>address</code> The address of the owner. <code>spender</code> <code>address</code> The address of the spender. <p>Returns</p> Name Type Description <code>approved</code> <code>bool</code> The approval status."},{"location":"Reference/erc6909/#transfer","title":"transfer","text":"<p>Transfers an amount of an id from the caller to a receiver.</p> <pre><code>function transfer(address receiver, uint256 id, uint256 amount) external returns (bool);\n</code></pre> <p>Parameters</p> Name Type Description <code>receiver</code> <code>address</code> The address of the receiver. <code>id</code> <code>uint256</code> The id of the token. <code>amount</code> <code>uint256</code> The amount of the token."},{"location":"Reference/erc6909/#transferfrom","title":"transferFrom","text":"<p>Transfers an amount of an id from a sender to a receiver.</p> <pre><code>function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external returns (bool);\n</code></pre> <p>Parameters</p> Name Type Description <code>sender</code> <code>address</code> The address of the sender. <code>receiver</code> <code>address</code> The address of the receiver. <code>id</code> <code>uint256</code> The id of the token. <code>amount</code> <code>uint256</code> The amount of the token."},{"location":"Reference/erc6909/#approve","title":"approve","text":"<p>Approves an amount of an id to a spender.</p> <pre><code>function approve(address spender, uint256 id, uint256 amount) external returns (bool);\n</code></pre> <p>Parameters</p> Name Type Description <code>spender</code> <code>address</code> The address of the spender. <code>id</code> <code>uint256</code> The id of the token. <code>amount</code> <code>uint256</code> The amount of the token."},{"location":"Reference/erc6909/#setoperator","title":"setOperator","text":"<p>Sets or removes a spender as an operator for the caller.</p> <pre><code>function setOperator(address spender, bool approved) external returns (bool);\n</code></pre> <p>Parameters</p> Name Type Description <code>spender</code> <code>address</code> The address of the spender. <code>approved</code> <code>bool</code> The approval status."},{"location":"Reference/erc6909/#events","title":"Events","text":""},{"location":"Reference/erc6909/#transfer_1","title":"Transfer","text":"<p>The event emitted when a transfer occurs.</p> <pre><code>event Transfer(address caller, address indexed sender, address indexed receiver, uint256 indexed id, uint256 amount);\n</code></pre> <p>Parameters</p> Name Type Description <code>caller</code> <code>address</code> The caller of the transfer. <code>sender</code> <code>address</code> The address of the sender. <code>receiver</code> <code>address</code> The address of the receiver. <code>id</code> <code>uint256</code> The id of the token. <code>amount</code> <code>uint256</code> The amount of the token."},{"location":"Reference/erc6909/#operatorset","title":"OperatorSet","text":"<p>The event emitted when an operator is set.</p> <pre><code>event OperatorSet(address indexed owner, address indexed spender, bool approved);\n</code></pre> <p>Parameters</p> Name Type Description <code>owner</code> <code>address</code> The address of the owner. <code>spender</code> <code>address</code> The address of the spender. <code>approved</code> <code>bool</code> The approval status."},{"location":"Reference/erc6909/#approval","title":"Approval","text":"<p>The event emitted when an approval occurs.</p> <pre><code>event Approval(address indexed owner, address indexed spender, uint256 indexed id, uint256 amount);\n</code></pre> <p>Parameters</p> Name Type Description <code>owner</code> <code>address</code> The address of the owner. <code>spender</code> <code>address</code> The address of the spender. <code>id</code> <code>uint256</code> The id of the token. <code>amount</code> <code>uint256</code> The amount of the token."},{"location":"Reference/glossary/","title":"Glossary","text":""},{"location":"Reference/glossary/#platform-terms","title":"Platform Terms","text":"Term Description Auctioneer Contract A smart contract designed for auctioning Ethereum block space, enabling dynamic participation and settlement. ERC6909 Standard A specification for managing auction-related functionalities within smart contracts. SafeTransferLib A library ensuring the safe transfer of WETH (Wrapped Ether) within smart contract operations. Bidders Entities that participate in auctions by submitting bids for block space. Manual Bids Bids placed by bidders manually for specific quantities and prices in an auction. Settlement The process of concluding an auction, involving transferring owed amounts to successful bidders. SDK (Software Development Kit) Tools and libraries provided to developers for building applications on a specific platform. Testnet A testing network where developers can deploy and test their applications in a simulated environment without using real assets. Direct Payment Method A straightforward payment approach where transaction fees are paid directly by the transactions included in a block. Coinbase Transfer Payment Method A method where transaction fees and rewards are transferred to the block proposer's address via the coinbase transaction. Indirect Address Payment Method A payment method involving the use of a different address by the builder to pay the proposer through an end-of-block transaction. Intermediate Transfer Payment Method A two-step payment process involving an intermediary address for transferring payments to the proposer. Smart Contract-Based Payment Method Payment processing through a smart contract, allowing for programmable distributions based on predefined rules. Off-Chain Payment Method Payments made outside the blockchain network, possibly through other cryptocurrencies or banking systems. Validator A network participant responsible for validating transactions and blocks on the Ethereum blockchain. MEV (Miner Extractable Value) Value extracted by miners (or validators) through their ability to include, exclude, or reorder transactions within blocks. Slashing A penalty mechanism where a validator's stake is reduced due to malicious actions or failure to comply with network rules. Primary Market The initial auction market where block space is auctioned to bidders. Secondary Market A market that operates after the primary allocation, allowing for reallocation and adjustment based on new information. Uniform Price Auction An auction format where all winning bidders pay the same price. Discriminatory Price Auction An auction format where winning bidders pay according to their bid prices. Augmented Uniform Price Auction A modified uniform price auction designed to address underpricing by introducing features like elastic supply and alternative tie-breaking rules. WETH (Wrapped Ether) A token that represents Ether 1:1, allowing for easier integration with ERC-20 compatible services. Gas A measure of computational effort required to execute operations on the Ethereum network. Gas Price The cost per unit of gas, paid by users to compensate for the computational energy required to process and validate transactions. Gwei A denomination of Ether, where 1 Gwei equals 10^-9 ETH. Block Proposal The process by which validators or miners propose a set of transactions to be included in a new block. Staking The act of locking up cryptocurrency holdings to support the operation of a blockchain network, often in exchange for rewards. Epoch A division of time used in blockchain networks, referring to a set period during which certain processes or updates occur."},{"location":"Reference/rpc-payload/","title":"RPC Payload","text":""},{"location":"Reference/rpc-payload/#execution-layer-encoding","title":"Execution Layer Encoding","text":"field type description network_id string The network on which you want the simulate the transaction. One of: block_number number Block height. If left out the pending block will be used transaction_index number The index of the transaction inside the block. Note: This parameter must be omitted or 0 when the block_number property is left out from string The originating address for the simulated transaction to string The destination address for the simulated transaction input string ABI encoded input for the transaction gas number The gas limit for the transaction gas_price string The gas price for the transcation value string The ETH value sent in the transcation simulation_type string Either full or quick. full simulations use the contracts source code to generate a full trace, while the quick simulation will only use the contracts bytecode. If omitted, the default value is full. raw is available as well as the fastest one, which skips some steps save boolean Whether or not to save this simulation for later inspection save_if_fails boolean Save the simulation if the simulated transaction failed state_objects map[address]StateObject Use provided state objects to overwrite current state objects at address contracts []Contract Array of contract deployment info (exactly like contract upload requests). Will use the source field to overwrite the contracts source at a given address. block_header BlockHeader BlockHeader override. Used to change the timestamp or block number inside the EVM. Consists of timestamp and number both of which are optional. timestamp and number are hexadecimal values starting with 0x."},{"location":"Relay/","title":"ValidatorRegistration","text":""},{"location":"Relay/#properties","title":"Properties","text":"Name Type Description Notes fee_recipient String Address to receive fees from the block. [default to null] gas_limit String Preferred gas limit of validator. [default to null] timestamp String Unix timestamp of registration. [default to null] pubkey String BLS public key of validator. [default to null]"},{"location":"Relay/#validatorsresponseentry","title":"ValidatorsResponseEntry","text":""},{"location":"Relay/#properties_1","title":"Properties","text":"Name Type Description Notes slot String [optional] [default to null] validator_index String [optional] [default to null] entry getValidators_200_response_inner_entry [optional] [default to null]"},{"location":"Relay/captive-insurance/","title":"Captive Insurance","text":""},{"location":"Relay/captive-insurance/#captive-market-infrastructure-insurance","title":"Captive Market Infrastructure Insurance","text":"<p>The proposed forward contract market for captive insurance is designed to provide a platform for the efficient transfer of risk between participating validators and other market participants with the operation of the platform by the Relay.</p> <p>The Relay manages validator connectivity and provides the validator with block proposals for the validator to use when creating a block. The captive insurance is used to provide a service level agreement between the relay and the validators connecting to the relay.</p>"},{"location":"Relay/captive-insurance/#relay-insurance","title":"Relay Insurance","text":"<p>XGA establishes the necessary infrastructure for trading, including contract execution, record-keeping, and dispute resolution mechanisms. Additionally it will implement systems for monitoring contract performance and ensuring compliance with the terms.</p>"},{"location":"Relay/captive-insurance/#coverage-scope","title":"Coverage Scope","text":"<p>In addition to traditional sorts of slashing protection mechanisms, the captive insurance model covers:</p> <ul> <li>Service Downtime: Compensation for periods when the relay is not     operational or accessible.</li> <li>Incorrect or Malicious Proposals: Protection against losses due to     incorrect or malicious block proposals provided by the relay.</li> <li>Performance Degradation: Coverage for scenarios where the relay's     performance significantly degrades, impacting validator operations.</li> </ul>"},{"location":"Relay/captive-insurance/#premium-calculation","title":"Premium Calculation","text":"<p>Based on the validator's stake size and the level of dependency on the relay service. Adjusted for the historical performance and reliability metrics of the relay.</p>"},{"location":"Relay/captive-insurance/#claim-process","title":"Claim Process","text":"<p>Validators submit claims with evidence of the relay service issue (e.g., logs, performance metrics). Claims are verified against relay service logs and performance data. Payouts are made based on the validated impact and the terms of the insurance policy.</p>"},{"location":"Relay/captive-insurance/#understanding-validator-slashing","title":"Understanding Validator Slashing","text":"<p>Validator slashing occurs when a validator on the Ethereum network acts maliciously or fails to comply with network consensus rules. This can result in the validator's stake being \"slashed\" or reduced as a penalty. Insurance against slashing would compensate the validator for a portion of their lost stake.</p>"},{"location":"Relay/captive-insurance/#captive-insurance-smart-contract-design","title":"Captive Insurance Smart Contract Design","text":"<p>This contract would act as the \"captive insurer,\" managing the insurance pool and claims.</p> <p>Stake Pooling: Validators would contribute to an insurance pool, held in the smart contract. This pool would collect premiums from validators who wish to insure their stake against slashing.</p> <p>Premium Calculation: The smart contract would calculate premiums based on the risk of slashing, which could be determined by past behavior, the amount of stake, and other risk factors.</p> <p>Claim Conditions: The smart contract would define the conditions under which a claim can be made, such as the type of slashing event and the evidence required to prove the slashing occurred.</p> <p>Claim Process: In the event of slashing, the affected validator would submit a claim to the smart contract along with evidence of the slashing event.</p> <p>Verification: The smart contract would include or interact with an oracle or a set of oracles to verify the slashing event. This requires manual verification by Manifold Finance as the underwriter.</p> <p>Payouts: Upon successful claim verification, the smart contract would automatically execute a payout to the slashed validator from the insurance pool, according to the terms of the policy.</p>"},{"location":"Relay/captive-insurance/#api","title":"API","text":"<p>This specification includes endpoints for retrieving the total accumulated premiums and claims, which would be useful for reporting and auditing purposes. The claims queue endpoint allows for managing and viewing the list of claims that are pending action. Lastly, the health check endpoint provides a simple way to monitor the API's status, which is crucial for maintenance and uptime monitoring.</p> <pre><code>/premiums/accumulated:\n    get:\n        summary: Get total accumulated premiums\n        operationId: getAccumulatedPremiums\n        tags:\n            - Premiums\n        responses:\n            \"200\":\n                description: Total accumulated premiums retrieved successfully\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/AccumulatedPremiums\"\n\n/claims/accumulated:\n    get:\n        summary: Get total accumulated claims\n        operationId: getAccumulatedClaims\n        tags:\n            - Claims\n        responses:\n            \"200\":\n                description: Total accumulated claims retrieved successfully\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/AccumulatedClaims\"\n\n/claims/queue:\n    get:\n        summary: Get the queue of claims awaiting processing\n        operationId: getClaimsQueue\n        tags:\n            - Claims\n        responses:\n            \"200\":\n                description: Claims queue retrieved successfully\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/ClaimsQueue\"\n</code></pre>"},{"location":"Rulebook/bylaws/","title":"Reference, Bylaws","text":""},{"location":"Rulebook/definitions/","title":"Definitions","text":""},{"location":"Rulebook/delivery-and-settlement/","title":"Submission of Trades","text":""},{"location":"Rulebook/general/","title":"General","text":""},{"location":"Rulebook/governance/","title":"200 Governance","text":""},{"location":"Rulebook/network-clearing-participants/","title":"300 General Eligibility Requirements of Network and Clearing Participants","text":""},{"location":"Rulebook/obligations/","title":"500 Obligations","text":""},{"location":"Rulebook/suspension/","title":"600 Suspension and Disciplinary Proceedings","text":""},{"location":"api/","title":"API Reference","text":"<p>API paths to resources are generally broken into multiple segments,</p> <p><code>{scheme}://{host}/{version}/{category}/[{pathSegment}][?{query}]</code>:</p> <ul> <li><code>version</code>: can be v1.0 or beta.</li> <li><code>category</code>: is a logical grouping of APIs into top-level categories.</li> <li><code>pathSegment</code>: is one or many navigation segments that can address an     entity, collection of entities, property, or operation available for an     entity.</li> <li><code>query</code>: string must follow the OData standard for query representations</li> </ul>"},{"location":"api/#rpc-methods-available","title":"RPC Methods Available","text":"RPC Method Description <code>eth_blockNumber</code> Returns the number of the most recent block. <code>eth_call</code> Executes a new message call immediately without creating a transaction on the block chain. <code>eth_estimateGas</code> Estimates the amount of gas required to execute a transaction. <code>eth_gasPrice</code> Returns the current price per gas in wei. <code>eth_getBalance</code> Returns the balance of the account of given address. <code>eth_getBlockByHash</code> Returns information about a block by hash. <code>eth_getBlockByNumber</code> Returns information about a block by block number. <code>eth_getBlockTransactionCountByHash</code> Returns the number of transactions in a block from a block matching the given block hash. <code>eth_getBlockTransactionCountByNumber</code> Returns the number of transactions in a block matching the given block number. <code>eth_getCode</code> Returns the code at a given address. <code>eth_getStorageAt</code> Returns the value from a storage position at a given address. <code>eth_getTransactionByBlockHashAndIndex</code> Returns information about a transaction by block hash and transaction index position. <code>eth_getTransactionByBlockNumberAndIndex</code> Returns information about a transaction by block number and transaction index position. <code>eth_getTransactionByHash</code> Returns information about a transaction requested by transaction hash. <code>eth_getTransactionCount</code> Returns the number of transactions sent from an address. <code>eth_getTransactionReceipt</code> Returns the receipt of a transaction by transaction hash. <code>eth_getUncleByBlockHashAndIndex</code> Returns information about an uncle of a block by hash and uncle index position. <code>eth_getUncleByBlockNumberAndIndex</code> Returns information about an uncle of a block by block number and uncle index position. <code>eth_getUncleCountByBlockHash</code> Returns the number of uncles in a block from a block matching the given block hash. <code>eth_getUncleCountByBlockNumber</code> Returns the number of uncles in a block from a block matching the given block number. <code>eth_sign</code> Signs data with a given address. <code>eth_signTypedData</code> Signs typed data with a given address (EIP-712). <code>eth_getLogs</code> Returns an array of logs matching a specified filter condition. <code>net_version</code> Returns the current network protocol version."},{"location":"api/#api-rate-limiting","title":"API Rate Limiting","text":"<p>If you receive a rate limit error, you should stop making requests temporarily according to these guidelines:</p> <p>Continuing to make requests while you are rate limited may result in the banning of you, your family, and possibly your entire country.</p>"},{"location":"api/#exceeding-the-rate-limit","title":"Exceeding the rate limit","text":""},{"location":"api/#80-requests-per-minute-is-the-public-default","title":"80 requests per minute is the public default","text":"<p>Warning</p> <p>Reach out to us via Telegram or Email to get a rate limit increase if needed.</p> <p>If you exceed your primary rate limit, you will receive a <code>403</code> or <code>429</code> response, and the <code>x-ratelimit-remaining</code> header will be <code>0</code>. You should not retry your request until after the time specified by the <code>x-ratelimit-reset</code> header.</p> <p>If you exceed a secondary rate limit, you will receive a <code>403</code> or <code>429</code> response and an error message that indicates that you exceeded a secondary rate limit.</p> <p>If the <code>retry-after</code> response header is present, you should not retry your request until after that many seconds has elapsed. If the <code>x-ratelimit-remaining</code> header is <code>0</code>, you should not retry your request until after the time, in UTC epoch seconds, specified by the <code>x-ratelimit-reset</code> header.<sup>1</sup></p> <ol> <li> <p>Response header for retry/rate limit is not yet available.\u00a0\u21a9</p> </li> </ol>"},{"location":"api/beta-auction/","title":"Auction RPC API","text":""},{"location":"api/beta-auction/#beta-block","title":"Beta Block","text":"<p>!!swagger openapi.yml!!</p>"},{"location":"api/bundle/","title":"Ethereum Bundle API","text":""},{"location":"api/bundle/#bundle-api","title":"Bundle API","text":"<p>!!swagger eth-bundle.yml!!</p>"},{"location":"api/relay/","title":"Relay API","text":""},{"location":"api/relay/#relay-rest-api","title":"Relay REST API","text":"<p>Extended from the Relay spec</p>"},{"location":"api/relay/#relay-api-dev","title":"Relay API dev","text":"<p>API specification for MEV-Boost PBS relays.</p> Contact: GitHub Repository  License: CC0-1.0"},{"location":"api/relay/#servers","title":"Servers","text":"Description URL {server_url} {server_url}"},{"location":"api/relay/#builder","title":"Builder","text":""},{"location":"api/relay/#get-relayv1buildervalidators","title":"GET /relay/v1/builder/validators","text":"<p>Get a list of validator registrations for validators scheduled to propose in the current and next epoch.</p> Description <ul> <li> <p>Used by builders to know when to submit bids for an upcoming proposal.</p> </li> <li> <p>Returns an array of validator registrations for the current and next epoch.</p> </li> <li> <p>Each entry includes a slot and the validator with assigned duty.</p> </li> <li> <p>Slots without a registered validator are omitted.</p> </li> </ul> <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"slot\": \"1\",\n        \"validator_index\": \"1\",\n        \"entry\": {\n            \"message\": {\n                \"fee_recipient\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                \"gas_limit\": \"1\",\n                \"timestamp\": \"1\",\n                \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n            },\n            \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n        }\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"slot\": {\n                \"type\": \"string\",\n                \"example\": \"1\"\n            },\n            \"validator_index\": {\n                \"type\": \"string\",\n                \"example\": \"1\"\n            },\n            \"entry\": {\n                \"type\": \"object\",\n                \"description\": \"The `SignedValidatorRegistration` object from the Builder API specification.\",\n                \"required\": [\n                    \"message\",\n                    \"signature\"\n                ],\n                \"properties\": {\n                    \"message\": {\n                        \"type\": \"object\",\n                        \"description\": \"The `ValidatorRegistration` object from the Builder API specification.\",\n                        \"required\": [\n                            \"fee_recipient\",\n                            \"gas_limit\",\n                            \"timestamp\",\n                            \"pubkey\"\n                        ],\n                        \"properties\": {\n                            \"fee_recipient\": {\n                                \"description\": \"Address to receive fees from the block.\",\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                            },\n                            \"gas_limit\": {\n                                \"description\": \"Preferred gas limit of validator.\",\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"timestamp\": {\n                                \"description\": \"Unix timestamp of registration.\",\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"pubkey\": {\n                                \"description\": \"BLS public key of validator.\",\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                            }\n                        }\n                    },\n                    \"signature\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{192}$\",\n                        \"example\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/relay/#post-relayv1builderblocks","title":"POST /relay/v1/builder/blocks","text":"<p>Submit a new block to the relay.</p> Description <ul> <li> <p>Blocks can be submitted as JSON or SSZ, and optionally GZIP encoded. To be   clear, there are four options: JSON, JSON+GZIP, SSZ, SSZ+GZIP. If JSON, the   content type should be <code>application/json</code>. If SSZ, the content type should   be <code>application/octet-stream</code>.</p> </li> <li> <p>To enable GZIP compression for the request body, the HTTP content encoding   should be <code>gzip</code>. Compression is optional.</p> </li> <li> <p>The relay will simulate the block to verify properties and proposer   payment in the payment transaction from builder to proposer   <code>fee_recipient</code> at the end of block.</p> </li> <li> <p>For accountability, builder signature is over the SSZ encoded <code>message</code>.</p> </li> <li> <p>The <code>message</code>, which does not include the transactions, will be made   public via the data API, allowing anyone to verify the builder signature.</p> </li> <li> <p>Any new submission by a builder will overwrite a previous one by the same   <code>builder_pubkey</code>, even if it is less profitable.</p> </li> </ul> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>cancellations</code> query string No If set to 1, opt into bid cancellations. <p>Request body</p> application/jsonapplication/octet-stream <pre><code>{\n    \"message\": {\n        \"slot\": \"1\",\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"builder_pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n        \"proposer_fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"value\": \"1\"\n    },\n    \"execution_payload\": {\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"state_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"receipts_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"logs_bloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"prev_randao\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_number\": \"1\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"timestamp\": \"1\",\n        \"extra_data\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"base_fee_per_gas\": \"1\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"transactions\": [\n            \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\"\n        ]\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}\n</code></pre> <pre><code>{\n    \"message\": {\n        \"slot\": \"1\",\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"builder_pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n        \"proposer_fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"value\": \"1\"\n    },\n    \"execution_payload\": {\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"state_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"receipts_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"logs_bloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"prev_randao\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_number\": \"1\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"timestamp\": \"1\",\n        \"extra_data\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"base_fee_per_gas\": \"1\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"transactions\": [\n            \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\"\n        ],\n        \"withdrawals\": [\n            {\n                \"index\": \"1\",\n                \"validator_index\": \"1\",\n                \"address\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n                \"amount\": \"32000000000\"\n            }\n        ]\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}\n</code></pre> <pre><code>{\n    \"message\": {\n        \"slot\": \"1\",\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"builder_pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\",\n        \"proposer_fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"value\": \"1\"\n    },\n    \"execution_payload\": {\n        \"parent_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"fee_recipient\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n        \"state_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"receipts_root\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"logs_bloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"prev_randao\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"block_number\": \"1\",\n        \"gas_limit\": \"1\",\n        \"gas_used\": \"1\",\n        \"timestamp\": \"1\",\n        \"extra_data\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"base_fee_per_gas\": \"1\",\n        \"block_hash\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n        \"transactions\": [\n            \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\"\n        ],\n        \"withdrawals\": [\n            {\n                \"index\": \"1\",\n                \"validator_index\": \"1\",\n                \"address\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n                \"amount\": \"32000000000\"\n            }\n        ]\n    },\n    \"blobs_bundle\": {\n        \"commitments\": [\n            \"0x8dab030c51e16e84be9caab84ee3d0b8bbec1db4a0e4de76439da8424d9b957370a10a78851f97e4b54d2ce1ab0d686f\"\n        ],\n        \"proofs\": [\n            \"0xb4021b0de10f743893d4f71e1bf830c019e832958efd6795baf2f83b8699a9eccc5dc99015d8d4d8ec370d0cc333c06a\"\n        ],\n        \"blobs\": [\n            \"0x24564723180fcb3d994104538d351c8dcbde12d541676bb736cf678018ca4739\"\n        ]\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"oneOf\": [\n        {\n            \"allOf\": [\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"message\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"slot\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"parent_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"block_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"builder_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_fee_recipient\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                    \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                },\n                                \"gas_limit\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"gas_used\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"value\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                }\n                            }\n                        },\n                        \"signature\": {\n                            \"type\": \"string\",\n                            \"format\": \"hex\",\n                            \"pattern\": \"^0x[a-fA-F0-9]{192}$\",\n                            \"example\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n                        }\n                    }\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"execution_payload\": {\n                            \"allOf\": [\n                                {\n                                    \"type\": \"object\",\n                                    \"description\": \"The [`ExecutionPayload`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/bellatrix/beacon-chain.md#executionpayload) object from the CL Bellatrix spec.\",\n                                    \"required\": [\n                                        \"parent_hash\",\n                                        \"fee_recipient\",\n                                        \"state_root\",\n                                        \"receipts_root\",\n                                        \"logs_bloom\",\n                                        \"prev_randao\",\n                                        \"block_number\",\n                                        \"gas_limit\",\n                                        \"gas_used\",\n                                        \"timestamp\",\n                                        \"extra_data\",\n                                        \"base_fee_per_gas\",\n                                        \"block_hash\"\n                                    ],\n                                    \"properties\": {\n                                        \"parent_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"fee_recipient\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                        },\n                                        \"state_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"receipts_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"logs_bloom\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{512}$\"\n                                        },\n                                        \"prev_randao\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"block_number\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_limit\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_used\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"timestamp\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"extra_data\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"Extra data on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{0,64}$\"\n                                        },\n                                        \"base_fee_per_gas\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"block_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                        \"transactions\"\n                                    ],\n                                    \"properties\": {\n                                        \"transactions\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"string\",\n                                                \"format\": \"hex\",\n                                                \"description\": \"A transaction on the execution (Ethereum 1) network.\",\n                                                \"example\": \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\",\n                                                \"pattern\": \"^0x[a-fA-F0-9]{0,2147483648}$\"\n                                            },\n                                            \"maxItems\": 1048576\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"allOf\": [\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"message\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"slot\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"parent_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"block_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"builder_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_fee_recipient\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                    \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                },\n                                \"gas_limit\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"gas_used\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"value\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                }\n                            }\n                        },\n                        \"signature\": {\n                            \"type\": \"string\",\n                            \"format\": \"hex\",\n                            \"pattern\": \"^0x[a-fA-F0-9]{192}$\",\n                            \"example\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n                        }\n                    }\n                },\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"execution_payload\": {\n                            \"allOf\": [\n                                {\n                                    \"type\": \"object\",\n                                    \"description\": \"The [`ExecutionPayload`](https://github.com/ethereum/consensus-specs/blob/v1.3.0/specs/capella/beacon-chain.md#executionpayload) object from the CL Capella spec.\",\n                                    \"required\": [\n                                        \"parent_hash\",\n                                        \"fee_recipient\",\n                                        \"state_root\",\n                                        \"receipts_root\",\n                                        \"logs_bloom\",\n                                        \"prev_randao\",\n                                        \"block_number\",\n                                        \"gas_limit\",\n                                        \"gas_used\",\n                                        \"timestamp\",\n                                        \"extra_data\",\n                                        \"base_fee_per_gas\",\n                                        \"block_hash\"\n                                    ],\n                                    \"properties\": {\n                                        \"parent_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"fee_recipient\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                        },\n                                        \"state_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"receipts_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"logs_bloom\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{512}$\"\n                                        },\n                                        \"prev_randao\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"block_number\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_limit\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_used\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"timestamp\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"extra_data\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"Extra data on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{0,64}$\"\n                                        },\n                                        \"base_fee_per_gas\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"block_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"required\": [\n                                        \"transactions\",\n                                        \"withdrawals\"\n                                    ],\n                                    \"properties\": {\n                                        \"transactions\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"string\",\n                                                \"format\": \"hex\",\n                                                \"description\": \"A transaction on the execution (Ethereum 1) network.\",\n                                                \"example\": \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\",\n                                                \"pattern\": \"^0x[a-fA-F0-9]{0,2147483648}$\"\n                                            },\n                                            \"maxItems\": 1048576\n                                        },\n                                        \"withdrawals\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"required\": [\n                                                    \"index\",\n                                                    \"validator_index\",\n                                                    \"address\",\n                                                    \"amount\"\n                                                ],\n                                                \"properties\": {\n                                                    \"index\": {\n                                                        \"description\": \"The index of the withdrawal.\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    },\n                                                    \"validator_index\": {\n                                                        \"description\": \"The index of the withdrawing validator.\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    },\n                                                    \"address\": {\n                                                        \"description\": \"The address to which the withdrawal is credited.\",\n                                                        \"type\": \"string\",\n                                                        \"format\": \"hex\",\n                                                        \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                                        \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                                    },\n                                                    \"amount\": {\n                                                        \"description\": \"The value withdrawn (gwei).\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    }\n                                                }\n                                            },\n                                            \"maxItems\": 16\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        },\n        {\n            \"allOf\": [\n                {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"message\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"slot\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"parent_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"block_hash\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                },\n                                \"builder_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_pubkey\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                    \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                },\n                                \"proposer_fee_recipient\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"hex\",\n                                    \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                    \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                    \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                },\n                                \"gas_limit\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"gas_used\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                },\n                                \"value\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"1\"\n                                }\n                            }\n                        },\n                        \"signature\": {\n                            \"type\": \"string\",\n                            \"format\": \"hex\",\n                            \"pattern\": \"^0x[a-fA-F0-9]{192}$\",\n                            \"example\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n                        }\n                    }\n                },\n                {\n                    \"type\": \"object\",\n                    \"description\": \"A wrapper object containing the ExecutionPayload and the BlobsBundle\",\n                    \"required\": [\n                        \"execution_payload\",\n                        \"blobs_bundle\"\n                    ],\n                    \"properties\": {\n                        \"execution_payload\": {\n                            \"allOf\": [\n                                {\n                                    \"type\": \"object\",\n                                    \"description\": \"The [`ExecutionPayload`](https://github.com/ethereum/consensus-specs/blob/master/specs/deneb/beacon-chain.md#executionpayload) object from the CL Deneb spec.\",\n                                    \"properties\": {\n                                        \"parent_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"fee_recipient\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                        },\n                                        \"state_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"receipts_root\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"logs_bloom\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{512}$\"\n                                        },\n                                        \"prev_randao\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        },\n                                        \"block_number\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_limit\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"gas_used\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"timestamp\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"extra_data\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"description\": \"Extra data on the execution (Ethereum 1) network.\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{0,64}$\"\n                                        },\n                                        \"base_fee_per_gas\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"excess_data_gas\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"1\"\n                                        },\n                                        \"block_hash\": {\n                                            \"type\": \"string\",\n                                            \"format\": \"hex\",\n                                            \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                            \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                                        }\n                                    }\n                                },\n                                {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"transactions\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"string\",\n                                                \"format\": \"hex\",\n                                                \"description\": \"A transaction on the execution (Ethereum 1) network.\",\n                                                \"example\": \"0x02f878831469668303f51d843b9ac9f9843b9aca0082520894c93269b73096998db66be0441e836d873535cb9c8894a19041886f000080c001a031cc29234036afbf9a1fb9476b463367cb1f957ac0b919b69bbc798436e604aaa018c4e9c3914eb27aadd0b91e10b18655739fcf8c1fc398763a9f1beecb8ddc86\",\n                                                \"pattern\": \"^0x[a-fA-F0-9]{0,2147483648}$\"\n                                            },\n                                            \"maxItems\": 1048576\n                                        },\n                                        \"withdrawals\": {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"index\": {\n                                                        \"description\": \"The index of the withdrawal.\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    },\n                                                    \"validator_index\": {\n                                                        \"description\": \"The index of the withdrawing validator.\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    },\n                                                    \"address\": {\n                                                        \"description\": \"The address to which the withdrawal is credited.\",\n                                                        \"type\": \"string\",\n                                                        \"format\": \"hex\",\n                                                        \"example\": \"0xabcf8e0d4e9587369b2301d0790347320302cc09\",\n                                                        \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                                                    },\n                                                    \"amount\": {\n                                                        \"description\": \"The value withdrawn (gwei).\",\n                                                        \"type\": \"string\",\n                                                        \"example\": \"1\"\n                                                    }\n                                                }\n                                            },\n                                            \"maxItems\": 16\n                                        }\n                                    }\n                                }\n                            ]\n                        },\n                        \"blobs_bundle\": {\n                            \"type\": \"object\",\n                            \"description\": \"The `BlobsBundle` object from the CL Deneb spec\",\n                            \"required\": [\n                                \"blobs\",\n                                \"commitments\",\n                                \"proofs\"\n                            ],\n                            \"properties\": {\n                                \"blobs\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"hex\",\n                                        \"pattern\": \"^0x[a-fA-F0-9]{262144}$\",\n                                        \"description\": \"A blob is `FIELD_ELEMENTS_PER_BLOB * size_of(BLSFieldElement) = 4096 * 32 = 131072` bytes (`DATA`) representing a SSZ-encoded Blob as defined in Deneb\"\n                                    },\n                                    \"minItems\": 0,\n                                    \"maxItems\": 4096\n                                },\n                                \"commitments\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"hex\",\n                                        \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                        \"description\": \"A G1 curve point. Same as BLS standard \\\"is valid pubkey\\\" check but also allows `0x00..00` for point-at-infinity\",\n                                        \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                                    },\n                                    \"minItems\": 0,\n                                    \"maxItems\": 4096\n                                },\n                                \"proofs\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"string\",\n                                        \"format\": \"hex\",\n                                        \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                        \"description\": \"A G1 curve point. Used for verifying that the `KZGCommitment` for a given `Blob` is correct.\"\n                                    },\n                                    \"minItems\": 0,\n                                    \"maxItems\": 4096\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}\n</code></pre> Schema of the request body <pre><code>{\n    \"description\": \"SSZ serialized request. Use content type header to indicate that SSZ data is contained in the request body.\"\n}\n</code></pre> <p> Response 200 OK </p> <p> Response 400 Bad Request </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"code\",\n                \"message\"\n            ],\n            \"properties\": {\n                \"code\": {\n                    \"description\": \"Either specific error code in case of invalid request or http status code\",\n                    \"type\": \"number\",\n                    \"example\": 404\n                },\n                \"message\": {\n                    \"description\": \"Message describing error\",\n                    \"type\": \"string\"\n                },\n                \"stacktraces\": {\n                    \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        {\n            \"example\": {\n                \"code\": 400,\n                \"message\": \"payload for this slot was already delivered\"\n            }\n        }\n    ]\n}\n</code></pre> <p> Response 500 Internal Server Error </p> application/json <pre><code>{\n    \"code\": 500,\n    \"message\": \"internal server error\"\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\n            \"description\": \"Either specific error code in case of invalid request or http status code\",\n            \"type\": \"number\",\n            \"example\": 404\n        },\n        \"message\": {\n            \"description\": \"Message describing error\",\n            \"type\": \"string\"\n        },\n        \"stacktraces\": {\n            \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/relay/#data","title":"Data","text":""},{"location":"api/relay/#get-relayv1databidtracesproposer_payload_delivered","title":"GET /relay/v1/data/bidtraces/proposer_payload_delivered","text":"<p>Get payloads that were delivered to proposers.</p> Description <ul> <li> <p>Payloads become available after the relay responds to a <code>getPayload</code> request from the proposer.</p> </li> <li> <p>Query arguments are used as filters.</p> </li> </ul> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>block_hash</code> query string No A specific block hash. <code>block_number</code> query string No A specific block number. <code>builder_pubkey</code> query string No A specific builder public key. <code>cursor</code> query string No A starting slot for multiple results. <code>limit</code> query string No The number of results. <code>order_by</code> query string No Sort results in order of... <code>proposer_pubkey</code> query string No A specific proposer public key. <code>slot</code> query string No A specific slot. <p> Response 200 OK </p> application/json <p><pre><code>[\n    null\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"allOf\": [\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"slot\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    },\n                    \"parent_hash\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                    },\n                    \"block_hash\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                    },\n                    \"builder_pubkey\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                        \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                        \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                    },\n                    \"proposer_pubkey\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                        \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                        \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                    },\n                    \"proposer_fee_recipient\": {\n                        \"type\": \"string\",\n                        \"format\": \"hex\",\n                        \"description\": \"An address on the execution (Ethereum 1) network.\",\n                        \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                        \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                    },\n                    \"gas_limit\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    },\n                    \"gas_used\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    },\n                    \"value\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    }\n                }\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"block_number\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    },\n                    \"num_tx\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    }\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"code\",\n                \"message\"\n            ],\n            \"properties\": {\n                \"code\": {\n                    \"description\": \"Either specific error code in case of invalid request or http status code\",\n                    \"type\": \"number\",\n                    \"example\": 404\n                },\n                \"message\": {\n                    \"description\": \"Message describing error\",\n                    \"type\": \"string\"\n                },\n                \"stacktraces\": {\n                    \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        {\n            \"example\": {\n                \"code\": 400,\n                \"message\": \"invalid block_hash argument\"\n            }\n        }\n    ]\n}\n</code></pre> <p> Response 500 Internal Server Error </p> application/json <pre><code>{\n    \"code\": 500,\n    \"message\": \"internal server error\"\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\n            \"description\": \"Either specific error code in case of invalid request or http status code\",\n            \"type\": \"number\",\n            \"example\": 404\n        },\n        \"message\": {\n            \"description\": \"Message describing error\",\n            \"type\": \"string\"\n        },\n        \"stacktraces\": {\n            \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/relay/#get-relayv1databidtracesbuilder_blocks_received","title":"GET /relay/v1/data/bidtraces/builder_blocks_received","text":"<p>Get builder bid submissions.</p> Description <ul> <li> <p>Returns a list of builder bids without execution payloads.</p> </li> <li> <p>Only submissions that were successfully verified.</p> </li> </ul> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>block_hash</code> query string No A specific block hash. <code>block_number</code> query string No A specific block number. <code>builder_pubkey</code> query string No A specific builder public key. <code>limit</code> query string No The number of results. <code>slot</code> query string No A specific slot. <p> Response 200 OK </p> application/json <p><pre><code>[\n    null\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"allOf\": [\n            {\n                \"allOf\": [\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"slot\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"parent_hash\": {\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                            },\n                            \"block_hash\": {\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"example\": \"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{64}$\"\n                            },\n                            \"builder_pubkey\": {\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                            },\n                            \"proposer_pubkey\": {\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                                \"description\": \"The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._\",\n                                \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                            },\n                            \"proposer_fee_recipient\": {\n                                \"type\": \"string\",\n                                \"format\": \"hex\",\n                                \"description\": \"An address on the execution (Ethereum 1) network.\",\n                                \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                                \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                            },\n                            \"gas_limit\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"gas_used\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"value\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            }\n                        }\n                    },\n                    {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"block_number\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            },\n                            \"num_tx\": {\n                                \"type\": \"string\",\n                                \"example\": \"1\"\n                            }\n                        }\n                    }\n                ]\n            },\n            {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"timestamp\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    },\n                    \"timestamp_ms\": {\n                        \"type\": \"string\",\n                        \"example\": \"1\"\n                    }\n                }\n            }\n        ]\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"code\",\n                \"message\"\n            ],\n            \"properties\": {\n                \"code\": {\n                    \"description\": \"Either specific error code in case of invalid request or http status code\",\n                    \"type\": \"number\",\n                    \"example\": 404\n                },\n                \"message\": {\n                    \"description\": \"Message describing error\",\n                    \"type\": \"string\"\n                },\n                \"stacktraces\": {\n                    \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        {\n            \"example\": {\n                \"code\": 400,\n                \"message\": \"cannot specify both slot and cursor\"\n            }\n        }\n    ]\n}\n</code></pre> <p> Response 500 Internal Server Error </p> application/json <pre><code>{\n    \"code\": 500,\n    \"message\": \"internal server error\"\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\n            \"description\": \"Either specific error code in case of invalid request or http status code\",\n            \"type\": \"number\",\n            \"example\": 404\n        },\n        \"message\": {\n            \"description\": \"Message describing error\",\n            \"type\": \"string\"\n        },\n        \"stacktraces\": {\n            \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/relay/#get-relayv1datavalidator_registration","title":"GET /relay/v1/data/validator_registration","text":"<p>Check that a validator is registered with the relay.</p> Description <ul> <li> <p>Returns the latest validator registration for a given pubkey.</p> </li> <li> <p>Useful to check whether your own registration was successful.</p> </li> </ul> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>pubkey</code> query string No The validator's public key. <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"message\": {\n        \"fee_recipient\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n        \"gas_limit\": \"1\",\n        \"timestamp\": \"1\",\n        \"pubkey\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n    },\n    \"signature\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"description\": \"The `SignedValidatorRegistration` object from the Builder API specification.\",\n    \"required\": [\n        \"message\",\n        \"signature\"\n    ],\n    \"properties\": {\n        \"message\": {\n            \"type\": \"object\",\n            \"description\": \"The `ValidatorRegistration` object from the Builder API specification.\",\n            \"required\": [\n                \"fee_recipient\",\n                \"gas_limit\",\n                \"timestamp\",\n                \"pubkey\"\n            ],\n            \"properties\": {\n                \"fee_recipient\": {\n                    \"description\": \"Address to receive fees from the block.\",\n                    \"type\": \"string\",\n                    \"format\": \"hex\",\n                    \"example\": \"0xAbcF8e0d4e9587369b2301D0790347320302cc09\",\n                    \"pattern\": \"^0x[a-fA-F0-9]{40}$\"\n                },\n                \"gas_limit\": {\n                    \"description\": \"Preferred gas limit of validator.\",\n                    \"type\": \"string\",\n                    \"example\": \"1\"\n                },\n                \"timestamp\": {\n                    \"description\": \"Unix timestamp of registration.\",\n                    \"type\": \"string\",\n                    \"example\": \"1\"\n                },\n                \"pubkey\": {\n                    \"description\": \"BLS public key of validator.\",\n                    \"type\": \"string\",\n                    \"format\": \"hex\",\n                    \"pattern\": \"^0x[a-fA-F0-9]{96}$\",\n                    \"example\": \"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\"\n                }\n            }\n        },\n        \"signature\": {\n            \"type\": \"string\",\n            \"format\": \"hex\",\n            \"pattern\": \"^0x[a-fA-F0-9]{192}$\",\n            \"example\": \"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\"\n        }\n    }\n}\n</code></pre> <p> Response 400 Bad Request </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"required\": [\n                \"code\",\n                \"message\"\n            ],\n            \"properties\": {\n                \"code\": {\n                    \"description\": \"Either specific error code in case of invalid request or http status code\",\n                    \"type\": \"number\",\n                    \"example\": 404\n                },\n                \"message\": {\n                    \"description\": \"Message describing error\",\n                    \"type\": \"string\"\n                },\n                \"stacktraces\": {\n                    \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        {\n            \"example\": {\n                \"code\": 400,\n                \"message\": \"missing pubkey argument\"\n            }\n        }\n    ]\n}\n</code></pre> <p> Response 500 Internal Server Error </p> application/json <pre><code>{\n    \"code\": 500,\n    \"message\": \"internal server error\"\n}\n</code></pre> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\n            \"description\": \"Either specific error code in case of invalid request or http status code\",\n            \"type\": \"number\",\n            \"example\": 404\n        },\n        \"message\": {\n            \"description\": \"Message describing error\",\n            \"type\": \"string\"\n        },\n        \"stacktraces\": {\n            \"description\": \"Optional stacktraces, sent when node is in debug mode\",\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/relay/#schemas","title":"Schemas","text":""},{"location":"api/relay/#bellatrixsubmitblockrequest","title":"Bellatrix.SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#bidtracev2","title":"BidTraceV2","text":"<p>Type: </p>"},{"location":"api/relay/#bidtracev2withtimestamp","title":"BidTraceV2WithTimestamp","text":"<p>Type: </p>"},{"location":"api/relay/#capella-executionpayload","title":"Capella-ExecutionPayload","text":"<p>Type: </p>"},{"location":"api/relay/#capella-submitblockrequest","title":"Capella-SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#capellasubmitblockrequest","title":"Capella.SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#deneb-executionpayload","title":"Deneb-ExecutionPayload","text":"<p>Type: </p>"},{"location":"api/relay/#deneb-submitblockrequest","title":"Deneb-SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#denebsubmitblockrequest","title":"Deneb.SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#executionpayload","title":"ExecutionPayload","text":"<p>Type: </p>"},{"location":"api/relay/#submitblockrequest","title":"SubmitBlockRequest","text":"<p>Type: </p>"},{"location":"api/relay/#tags","title":"Tags","text":"Name Description Builder Set of endpoints to interact with an external block builder. Data Set of endpoints to provide data about the relay."},{"location":"api/self-report/","title":"Validator Reporting API","text":""},{"location":"api/self-report/#validator-reporting-rest-api","title":"Validator Reporting REST API","text":"<p>!!swagger rated.selfreport.ymll!!</p>"},{"location":"api/signature-scheme/","title":"Authenticated JSON RPC Service Access","text":""},{"location":"api/signature-scheme/#custom-payload-signature-scheme-for-authenticated-json-rpc-service-access","title":"Custom Payload Signature Scheme for Authenticated JSON RPC Service Access","text":"<p>This document specifies a method for authenticating requests to a JSON RPC service endpoint using a custom payload signature scheme. The scheme involves signing the request payload with an Ethereum key and including this signature in the request headers.</p> Note <p>This method is based off of Flashbot's <code>X-Flashbots-Signature</code> schema, and is compatible with it.</p>"},{"location":"api/signature-scheme/#introduction","title":"Introduction","text":"<p>This specification defines a method for authenticating requests made to a JSON RPC service endpoint. The authentication is achieved by signing the request payload using an Ethereum key and including this signature in the request's HTTP headers. This method ensures that the requests are authenticated and can be tracked over time for user statistics.</p>"},{"location":"api/signature-scheme/#terminology","title":"Terminology:","text":"<ul> <li>JSON RPC: A remote procedure call protocol encoded in JSON.</li> <li>Ethereum Key: A cryptographic key used for signing transactions in the     Ethereum blockchain.</li> <li>Payload Signature: A digital signature generated by signing the request     payload.</li> <li>X-Ethereum-Signature: HTTP header used to include the payload signature for     auction requests.</li> </ul>"},{"location":"api/signature-scheme/#specification","title":"Specification:","text":""},{"location":"api/signature-scheme/#signature-generation","title":"Signature Generation:","text":"<ul> <li>The client MUST generate a digital signature by signing the hash of the JSON     body of the request. The JSON body MUST be encoded as UTF-8 bytes before     hashing.</li> <li>Any valid Ethereum key CAN be used for signing the payload.</li> <li>The Ethereum address associated with the key used for signing WILL be     utilized by the service to track requests and provide user statistics.</li> </ul>"},{"location":"api/signature-scheme/#request-headers","title":"Request Headers:","text":"<ul> <li>The client MUST include the generated signature in the request headers.</li> <li>For auction requests, the signature MUST be included in the     <code>X-Ethereum-Signature</code> header.</li> <li>The headers <code>X-Ethereum-Signature</code> are CASE-INSENSITIVE.</li> </ul>"},{"location":"api/signature-scheme/#example-usage-with-curl","title":"Example Usage with cURL:","text":"<ul> <li>For auction requests:</li> </ul> <pre><code>curl -X POST -H \"Content-Type: application/json\" -H \"X-Ethereum-Signature: 0x1234:0xabcd\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendBundle\",\"params\":[...],\"id\":1}' &lt;https://api.securerpc.com/v1/auction&gt;\n</code></pre>"},{"location":"api/signature-scheme/#example-data","title":"Example Data","text":"<pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_sendBundle\",\n    \"params\": [...],\n    \"id\": 1\n}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/announcements/changelog/timeline-for-v0-to-v1/","title":"Timeline for v0 to v1","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>timeline\n    title Timeline of Key Events\n    dateFormat MM-DD\n    section Deployment and Governance\n    May 14th : Rollup Deployment\n    May 17th : v1 Main Net Enabled\n    May 20th : Governance Proposal Submitted\n    May 24th : First Week of Data Available\n\n    section Meetings and Voting\n    May 30th : Ethereum ACD Meeting\n    May 30th : Lido DAO Snapshot Voting Period Starts\n    June 6th : Lido DAO Snapshot Voting Period Ends</code></pre> <p>Read the forum post here</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/announcements/","title":"announcements","text":""},{"location":"blog/category/changelog/","title":"changelog","text":""}]}